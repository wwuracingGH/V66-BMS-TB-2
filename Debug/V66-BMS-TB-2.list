
V66-BMS-TB-2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001afc  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08001bbc  08001bbc  00002bbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001bec  08001bec  0000300c  2**0
                  CONTENTS
  4 .ARM          00000000  08001bec  08001bec  0000300c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001bec  08001bec  0000300c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001bec  08001bec  00002bec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001bf0  08001bf0  00002bf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001bf4  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ac  2000000c  08001c00  0000300c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000b8  08001c00  000030b8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000300c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006064  00000000  00000000  00003034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000013ca  00000000  00000000  00009098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006c0  00000000  00000000  0000a468  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000050e  00000000  00000000  0000ab28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000173b0  00000000  00000000  0000b036  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007f80  00000000  00000000  000223e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008583e  00000000  00000000  0002a366  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000afba4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001708  00000000  00000000  000afbe8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  000b12f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08001ba4 	.word	0x08001ba4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08001ba4 	.word	0x08001ba4

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
	  HAL_Init();
 8000224:	f000 fa7a 	bl	800071c <HAL_Init>
	  SystemClock_Config();
 8000228:	f000 f80f 	bl	800024a <SystemClock_Config>
	  MX_GPIO_Init();
 800022c:	f000 f8e2 	bl	80003f4 <MX_GPIO_Init>
	  MX_CAN_Init();
 8000230:	f000 f848 	bl	80002c4 <MX_CAN_Init>
	  MX_SPI1_Init();
 8000234:	f000 f8a0 	bl	8000378 <MX_SPI1_Init>


	  /* TODO: idk how the shutdown works, i need to fix this lol */
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8000238:	2390      	movs	r3, #144	@ 0x90
 800023a:	05db      	lsls	r3, r3, #23
 800023c:	2201      	movs	r2, #1
 800023e:	2102      	movs	r1, #2
 8000240:	0018      	movs	r0, r3
 8000242:	f000 fedb 	bl	8000ffc <HAL_GPIO_WritePin>

	  /* USER CODE END 2 */

	  /* Infinite loop */
	  while (1)
 8000246:	46c0      	nop			@ (mov r8, r8)
 8000248:	e7fd      	b.n	8000246 <main+0x26>

0800024a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800024a:	b590      	push	{r4, r7, lr}
 800024c:	b093      	sub	sp, #76	@ 0x4c
 800024e:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000250:	2414      	movs	r4, #20
 8000252:	193b      	adds	r3, r7, r4
 8000254:	0018      	movs	r0, r3
 8000256:	2334      	movs	r3, #52	@ 0x34
 8000258:	001a      	movs	r2, r3
 800025a:	2100      	movs	r1, #0
 800025c:	f001 fc76 	bl	8001b4c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000260:	1d3b      	adds	r3, r7, #4
 8000262:	0018      	movs	r0, r3
 8000264:	2310      	movs	r3, #16
 8000266:	001a      	movs	r2, r3
 8000268:	2100      	movs	r1, #0
 800026a:	f001 fc6f 	bl	8001b4c <memset>

	/** Initializes the RCC Oscillators according to the specified parameters
	* in the RCC_OscInitTypeDef structure.
	*/
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 800026e:	193b      	adds	r3, r7, r4
 8000270:	2220      	movs	r2, #32
 8000272:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000274:	193b      	adds	r3, r7, r4
 8000276:	2201      	movs	r2, #1
 8000278:	621a      	str	r2, [r3, #32]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800027a:	193b      	adds	r3, r7, r4
 800027c:	2200      	movs	r2, #0
 800027e:	625a      	str	r2, [r3, #36]	@ 0x24
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000280:	193b      	adds	r3, r7, r4
 8000282:	0018      	movs	r0, r3
 8000284:	f000 fed8 	bl	8001038 <HAL_RCC_OscConfig>
 8000288:	1e03      	subs	r3, r0, #0
 800028a:	d001      	beq.n	8000290 <SystemClock_Config+0x46>
	{
	Error_Handler();
 800028c:	f000 f922 	bl	80004d4 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	*/
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000290:	1d3b      	adds	r3, r7, #4
 8000292:	2207      	movs	r2, #7
 8000294:	601a      	str	r2, [r3, #0]
			      |RCC_CLOCKTYPE_PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 8000296:	1d3b      	adds	r3, r7, #4
 8000298:	2203      	movs	r2, #3
 800029a:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800029c:	1d3b      	adds	r3, r7, #4
 800029e:	2200      	movs	r2, #0
 80002a0:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002a2:	1d3b      	adds	r3, r7, #4
 80002a4:	2200      	movs	r2, #0
 80002a6:	60da      	str	r2, [r3, #12]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80002a8:	1d3b      	adds	r3, r7, #4
 80002aa:	2101      	movs	r1, #1
 80002ac:	0018      	movs	r0, r3
 80002ae:	f001 fa49 	bl	8001744 <HAL_RCC_ClockConfig>
 80002b2:	1e03      	subs	r3, r0, #0
 80002b4:	d001      	beq.n	80002ba <SystemClock_Config+0x70>
	{
	Error_Handler();
 80002b6:	f000 f90d 	bl	80004d4 <Error_Handler>
	}
}
 80002ba:	46c0      	nop			@ (mov r8, r8)
 80002bc:	46bd      	mov	sp, r7
 80002be:	b013      	add	sp, #76	@ 0x4c
 80002c0:	bd90      	pop	{r4, r7, pc}
	...

080002c4 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	b08a      	sub	sp, #40	@ 0x28
 80002c8:	af00      	add	r7, sp, #0
	hcan.Instance = CAN;
 80002ca:	4b29      	ldr	r3, [pc, #164]	@ (8000370 <MX_CAN_Init+0xac>)
 80002cc:	4a29      	ldr	r2, [pc, #164]	@ (8000374 <MX_CAN_Init+0xb0>)
 80002ce:	601a      	str	r2, [r3, #0]
	hcan.Init.Prescaler = 64;
 80002d0:	4b27      	ldr	r3, [pc, #156]	@ (8000370 <MX_CAN_Init+0xac>)
 80002d2:	2240      	movs	r2, #64	@ 0x40
 80002d4:	605a      	str	r2, [r3, #4]
	hcan.Init.Mode = CAN_MODE_NORMAL;
 80002d6:	4b26      	ldr	r3, [pc, #152]	@ (8000370 <MX_CAN_Init+0xac>)
 80002d8:	2200      	movs	r2, #0
 80002da:	609a      	str	r2, [r3, #8]
	hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80002dc:	4b24      	ldr	r3, [pc, #144]	@ (8000370 <MX_CAN_Init+0xac>)
 80002de:	2200      	movs	r2, #0
 80002e0:	60da      	str	r2, [r3, #12]
	hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 80002e2:	4b23      	ldr	r3, [pc, #140]	@ (8000370 <MX_CAN_Init+0xac>)
 80002e4:	2200      	movs	r2, #0
 80002e6:	611a      	str	r2, [r3, #16]
	hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 80002e8:	4b21      	ldr	r3, [pc, #132]	@ (8000370 <MX_CAN_Init+0xac>)
 80002ea:	2200      	movs	r2, #0
 80002ec:	615a      	str	r2, [r3, #20]
	hcan.Init.TimeTriggeredMode = DISABLE;
 80002ee:	4b20      	ldr	r3, [pc, #128]	@ (8000370 <MX_CAN_Init+0xac>)
 80002f0:	2200      	movs	r2, #0
 80002f2:	761a      	strb	r2, [r3, #24]
	hcan.Init.AutoBusOff = DISABLE;
 80002f4:	4b1e      	ldr	r3, [pc, #120]	@ (8000370 <MX_CAN_Init+0xac>)
 80002f6:	2200      	movs	r2, #0
 80002f8:	765a      	strb	r2, [r3, #25]
	hcan.Init.AutoWakeUp = DISABLE;
 80002fa:	4b1d      	ldr	r3, [pc, #116]	@ (8000370 <MX_CAN_Init+0xac>)
 80002fc:	2200      	movs	r2, #0
 80002fe:	769a      	strb	r2, [r3, #26]
	hcan.Init.AutoRetransmission = DISABLE;
 8000300:	4b1b      	ldr	r3, [pc, #108]	@ (8000370 <MX_CAN_Init+0xac>)
 8000302:	2200      	movs	r2, #0
 8000304:	76da      	strb	r2, [r3, #27]
	hcan.Init.ReceiveFifoLocked = DISABLE;
 8000306:	4b1a      	ldr	r3, [pc, #104]	@ (8000370 <MX_CAN_Init+0xac>)
 8000308:	2200      	movs	r2, #0
 800030a:	771a      	strb	r2, [r3, #28]
	hcan.Init.TransmitFifoPriority = DISABLE;
 800030c:	4b18      	ldr	r3, [pc, #96]	@ (8000370 <MX_CAN_Init+0xac>)
 800030e:	2200      	movs	r2, #0
 8000310:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000312:	4b17      	ldr	r3, [pc, #92]	@ (8000370 <MX_CAN_Init+0xac>)
 8000314:	0018      	movs	r0, r3
 8000316:	f000 fa65 	bl	80007e4 <HAL_CAN_Init>
 800031a:	1e03      	subs	r3, r0, #0
 800031c:	d001      	beq.n	8000322 <MX_CAN_Init+0x5e>
	{
	Error_Handler();
 800031e:	f000 f8d9 	bl	80004d4 <Error_Handler>
	}

	CAN_FilterTypeDef canfilterconfig;
	canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8000322:	003b      	movs	r3, r7
 8000324:	2201      	movs	r2, #1
 8000326:	621a      	str	r2, [r3, #32]
	canfilterconfig.FilterBank = 10;
 8000328:	003b      	movs	r3, r7
 800032a:	220a      	movs	r2, #10
 800032c:	615a      	str	r2, [r3, #20]
	canfilterconfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 800032e:	003b      	movs	r3, r7
 8000330:	2200      	movs	r2, #0
 8000332:	611a      	str	r2, [r3, #16]
	canfilterconfig.FilterIdHigh = 0xE5<<5;
 8000334:	003b      	movs	r3, r7
 8000336:	22e5      	movs	r2, #229	@ 0xe5
 8000338:	0152      	lsls	r2, r2, #5
 800033a:	601a      	str	r2, [r3, #0]
	canfilterconfig.FilterIdLow = 0x0000;
 800033c:	003b      	movs	r3, r7
 800033e:	2200      	movs	r2, #0
 8000340:	605a      	str	r2, [r3, #4]
	canfilterconfig.FilterMaskIdHigh = 0xE5<<5;
 8000342:	003b      	movs	r3, r7
 8000344:	22e5      	movs	r2, #229	@ 0xe5
 8000346:	0152      	lsls	r2, r2, #5
 8000348:	609a      	str	r2, [r3, #8]
	canfilterconfig.FilterMaskIdLow = 0x0000;
 800034a:	003b      	movs	r3, r7
 800034c:	2200      	movs	r2, #0
 800034e:	60da      	str	r2, [r3, #12]
	canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000350:	003b      	movs	r3, r7
 8000352:	2200      	movs	r2, #0
 8000354:	619a      	str	r2, [r3, #24]
	canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000356:	003b      	movs	r3, r7
 8000358:	2201      	movs	r2, #1
 800035a:	61da      	str	r2, [r3, #28]

	HAL_CAN_ConfigFilter(&hcan, &canfilterconfig);
 800035c:	003a      	movs	r2, r7
 800035e:	4b04      	ldr	r3, [pc, #16]	@ (8000370 <MX_CAN_Init+0xac>)
 8000360:	0011      	movs	r1, r2
 8000362:	0018      	movs	r0, r3
 8000364:	f000 fb3c 	bl	80009e0 <HAL_CAN_ConfigFilter>

}
 8000368:	46c0      	nop			@ (mov r8, r8)
 800036a:	46bd      	mov	sp, r7
 800036c:	b00a      	add	sp, #40	@ 0x28
 800036e:	bd80      	pop	{r7, pc}
 8000370:	20000028 	.word	0x20000028
 8000374:	40006400 	.word	0x40006400

08000378 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000378:	b580      	push	{r7, lr}
 800037a:	af00      	add	r7, sp, #0
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 800037c:	4b1b      	ldr	r3, [pc, #108]	@ (80003ec <MX_SPI1_Init+0x74>)
 800037e:	4a1c      	ldr	r2, [pc, #112]	@ (80003f0 <MX_SPI1_Init+0x78>)
 8000380:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8000382:	4b1a      	ldr	r3, [pc, #104]	@ (80003ec <MX_SPI1_Init+0x74>)
 8000384:	2282      	movs	r2, #130	@ 0x82
 8000386:	0052      	lsls	r2, r2, #1
 8000388:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800038a:	4b18      	ldr	r3, [pc, #96]	@ (80003ec <MX_SPI1_Init+0x74>)
 800038c:	2200      	movs	r2, #0
 800038e:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8000390:	4b16      	ldr	r3, [pc, #88]	@ (80003ec <MX_SPI1_Init+0x74>)
 8000392:	22f0      	movs	r2, #240	@ 0xf0
 8000394:	0112      	lsls	r2, r2, #4
 8000396:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000398:	4b14      	ldr	r3, [pc, #80]	@ (80003ec <MX_SPI1_Init+0x74>)
 800039a:	2202      	movs	r2, #2
 800039c:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800039e:	4b13      	ldr	r3, [pc, #76]	@ (80003ec <MX_SPI1_Init+0x74>)
 80003a0:	2201      	movs	r2, #1
 80003a2:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 80003a4:	4b11      	ldr	r3, [pc, #68]	@ (80003ec <MX_SPI1_Init+0x74>)
 80003a6:	2280      	movs	r2, #128	@ 0x80
 80003a8:	0092      	lsls	r2, r2, #2
 80003aa:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80003ac:	4b0f      	ldr	r3, [pc, #60]	@ (80003ec <MX_SPI1_Init+0x74>)
 80003ae:	2238      	movs	r2, #56	@ 0x38
 80003b0:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80003b2:	4b0e      	ldr	r3, [pc, #56]	@ (80003ec <MX_SPI1_Init+0x74>)
 80003b4:	2200      	movs	r2, #0
 80003b6:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80003b8:	4b0c      	ldr	r3, [pc, #48]	@ (80003ec <MX_SPI1_Init+0x74>)
 80003ba:	2200      	movs	r2, #0
 80003bc:	625a      	str	r2, [r3, #36]	@ 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80003be:	4b0b      	ldr	r3, [pc, #44]	@ (80003ec <MX_SPI1_Init+0x74>)
 80003c0:	2200      	movs	r2, #0
 80003c2:	629a      	str	r2, [r3, #40]	@ 0x28
	hspi1.Init.CRCPolynomial = 7;
 80003c4:	4b09      	ldr	r3, [pc, #36]	@ (80003ec <MX_SPI1_Init+0x74>)
 80003c6:	2207      	movs	r2, #7
 80003c8:	62da      	str	r2, [r3, #44]	@ 0x2c
	hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80003ca:	4b08      	ldr	r3, [pc, #32]	@ (80003ec <MX_SPI1_Init+0x74>)
 80003cc:	2200      	movs	r2, #0
 80003ce:	631a      	str	r2, [r3, #48]	@ 0x30
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80003d0:	4b06      	ldr	r3, [pc, #24]	@ (80003ec <MX_SPI1_Init+0x74>)
 80003d2:	2200      	movs	r2, #0
 80003d4:	635a      	str	r2, [r3, #52]	@ 0x34
	if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80003d6:	4b05      	ldr	r3, [pc, #20]	@ (80003ec <MX_SPI1_Init+0x74>)
 80003d8:	0018      	movs	r0, r3
 80003da:	f001 faff 	bl	80019dc <HAL_SPI_Init>
 80003de:	1e03      	subs	r3, r0, #0
 80003e0:	d001      	beq.n	80003e6 <MX_SPI1_Init+0x6e>
	{
	Error_Handler();
 80003e2:	f000 f877 	bl	80004d4 <Error_Handler>
	}
}
 80003e6:	46c0      	nop			@ (mov r8, r8)
 80003e8:	46bd      	mov	sp, r7
 80003ea:	bd80      	pop	{r7, pc}
 80003ec:	20000050 	.word	0x20000050
 80003f0:	40013000 	.word	0x40013000

080003f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003f4:	b590      	push	{r4, r7, lr}
 80003f6:	b089      	sub	sp, #36	@ 0x24
 80003f8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003fa:	240c      	movs	r4, #12
 80003fc:	193b      	adds	r3, r7, r4
 80003fe:	0018      	movs	r0, r3
 8000400:	2314      	movs	r3, #20
 8000402:	001a      	movs	r2, r3
 8000404:	2100      	movs	r1, #0
 8000406:	f001 fba1 	bl	8001b4c <memset>

	__HAL_RCC_GPIOF_CLK_ENABLE();
 800040a:	4b30      	ldr	r3, [pc, #192]	@ (80004cc <MX_GPIO_Init+0xd8>)
 800040c:	695a      	ldr	r2, [r3, #20]
 800040e:	4b2f      	ldr	r3, [pc, #188]	@ (80004cc <MX_GPIO_Init+0xd8>)
 8000410:	2180      	movs	r1, #128	@ 0x80
 8000412:	03c9      	lsls	r1, r1, #15
 8000414:	430a      	orrs	r2, r1
 8000416:	615a      	str	r2, [r3, #20]
 8000418:	4b2c      	ldr	r3, [pc, #176]	@ (80004cc <MX_GPIO_Init+0xd8>)
 800041a:	695a      	ldr	r2, [r3, #20]
 800041c:	2380      	movs	r3, #128	@ 0x80
 800041e:	03db      	lsls	r3, r3, #15
 8000420:	4013      	ands	r3, r2
 8000422:	60bb      	str	r3, [r7, #8]
 8000424:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000426:	4b29      	ldr	r3, [pc, #164]	@ (80004cc <MX_GPIO_Init+0xd8>)
 8000428:	695a      	ldr	r2, [r3, #20]
 800042a:	4b28      	ldr	r3, [pc, #160]	@ (80004cc <MX_GPIO_Init+0xd8>)
 800042c:	2180      	movs	r1, #128	@ 0x80
 800042e:	0289      	lsls	r1, r1, #10
 8000430:	430a      	orrs	r2, r1
 8000432:	615a      	str	r2, [r3, #20]
 8000434:	4b25      	ldr	r3, [pc, #148]	@ (80004cc <MX_GPIO_Init+0xd8>)
 8000436:	695a      	ldr	r2, [r3, #20]
 8000438:	2380      	movs	r3, #128	@ 0x80
 800043a:	029b      	lsls	r3, r3, #10
 800043c:	4013      	ands	r3, r2
 800043e:	607b      	str	r3, [r7, #4]
 8000440:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000442:	4b22      	ldr	r3, [pc, #136]	@ (80004cc <MX_GPIO_Init+0xd8>)
 8000444:	695a      	ldr	r2, [r3, #20]
 8000446:	4b21      	ldr	r3, [pc, #132]	@ (80004cc <MX_GPIO_Init+0xd8>)
 8000448:	2180      	movs	r1, #128	@ 0x80
 800044a:	02c9      	lsls	r1, r1, #11
 800044c:	430a      	orrs	r2, r1
 800044e:	615a      	str	r2, [r3, #20]
 8000450:	4b1e      	ldr	r3, [pc, #120]	@ (80004cc <MX_GPIO_Init+0xd8>)
 8000452:	695a      	ldr	r2, [r3, #20]
 8000454:	2380      	movs	r3, #128	@ 0x80
 8000456:	02db      	lsls	r3, r3, #11
 8000458:	4013      	ands	r3, r2
 800045a:	603b      	str	r3, [r7, #0]
 800045c:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 800045e:	2390      	movs	r3, #144	@ 0x90
 8000460:	05db      	lsls	r3, r3, #23
 8000462:	2200      	movs	r2, #0
 8000464:	2103      	movs	r1, #3
 8000466:	0018      	movs	r0, r3
 8000468:	f000 fdc8 	bl	8000ffc <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 800046c:	4b18      	ldr	r3, [pc, #96]	@ (80004d0 <MX_GPIO_Init+0xdc>)
 800046e:	2200      	movs	r2, #0
 8000470:	21f3      	movs	r1, #243	@ 0xf3
 8000472:	0018      	movs	r0, r3
 8000474:	f000 fdc2 	bl	8000ffc <HAL_GPIO_WritePin>
			  |GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

	/*Configure GPIO pins : PA0 PA1 */
	GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000478:	193b      	adds	r3, r7, r4
 800047a:	2203      	movs	r2, #3
 800047c:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800047e:	193b      	adds	r3, r7, r4
 8000480:	2201      	movs	r2, #1
 8000482:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000484:	193b      	adds	r3, r7, r4
 8000486:	2200      	movs	r2, #0
 8000488:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800048a:	193b      	adds	r3, r7, r4
 800048c:	2200      	movs	r2, #0
 800048e:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000490:	193a      	adds	r2, r7, r4
 8000492:	2390      	movs	r3, #144	@ 0x90
 8000494:	05db      	lsls	r3, r3, #23
 8000496:	0011      	movs	r1, r2
 8000498:	0018      	movs	r0, r3
 800049a:	f000 fc47 	bl	8000d2c <HAL_GPIO_Init>

	/*Configure GPIO pins : PB0 PB1 PB4 PB5
			   PB6 PB7 */
	GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 800049e:	0021      	movs	r1, r4
 80004a0:	187b      	adds	r3, r7, r1
 80004a2:	22f3      	movs	r2, #243	@ 0xf3
 80004a4:	601a      	str	r2, [r3, #0]
			  |GPIO_PIN_6|GPIO_PIN_7;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004a6:	187b      	adds	r3, r7, r1
 80004a8:	2201      	movs	r2, #1
 80004aa:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ac:	187b      	adds	r3, r7, r1
 80004ae:	2200      	movs	r2, #0
 80004b0:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004b2:	187b      	adds	r3, r7, r1
 80004b4:	2200      	movs	r2, #0
 80004b6:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004b8:	187b      	adds	r3, r7, r1
 80004ba:	4a05      	ldr	r2, [pc, #20]	@ (80004d0 <MX_GPIO_Init+0xdc>)
 80004bc:	0019      	movs	r1, r3
 80004be:	0010      	movs	r0, r2
 80004c0:	f000 fc34 	bl	8000d2c <HAL_GPIO_Init>

}
 80004c4:	46c0      	nop			@ (mov r8, r8)
 80004c6:	46bd      	mov	sp, r7
 80004c8:	b009      	add	sp, #36	@ 0x24
 80004ca:	bd90      	pop	{r4, r7, pc}
 80004cc:	40021000 	.word	0x40021000
 80004d0:	48000400 	.word	0x48000400

080004d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004d8:	b672      	cpsid	i
}
 80004da:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1){
 80004dc:	46c0      	nop			@ (mov r8, r8)
 80004de:	e7fd      	b.n	80004dc <Error_Handler+0x8>

080004e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b082      	sub	sp, #8
 80004e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004e6:	4b0f      	ldr	r3, [pc, #60]	@ (8000524 <HAL_MspInit+0x44>)
 80004e8:	699a      	ldr	r2, [r3, #24]
 80004ea:	4b0e      	ldr	r3, [pc, #56]	@ (8000524 <HAL_MspInit+0x44>)
 80004ec:	2101      	movs	r1, #1
 80004ee:	430a      	orrs	r2, r1
 80004f0:	619a      	str	r2, [r3, #24]
 80004f2:	4b0c      	ldr	r3, [pc, #48]	@ (8000524 <HAL_MspInit+0x44>)
 80004f4:	699b      	ldr	r3, [r3, #24]
 80004f6:	2201      	movs	r2, #1
 80004f8:	4013      	ands	r3, r2
 80004fa:	607b      	str	r3, [r7, #4]
 80004fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004fe:	4b09      	ldr	r3, [pc, #36]	@ (8000524 <HAL_MspInit+0x44>)
 8000500:	69da      	ldr	r2, [r3, #28]
 8000502:	4b08      	ldr	r3, [pc, #32]	@ (8000524 <HAL_MspInit+0x44>)
 8000504:	2180      	movs	r1, #128	@ 0x80
 8000506:	0549      	lsls	r1, r1, #21
 8000508:	430a      	orrs	r2, r1
 800050a:	61da      	str	r2, [r3, #28]
 800050c:	4b05      	ldr	r3, [pc, #20]	@ (8000524 <HAL_MspInit+0x44>)
 800050e:	69da      	ldr	r2, [r3, #28]
 8000510:	2380      	movs	r3, #128	@ 0x80
 8000512:	055b      	lsls	r3, r3, #21
 8000514:	4013      	ands	r3, r2
 8000516:	603b      	str	r3, [r7, #0]
 8000518:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800051a:	46c0      	nop			@ (mov r8, r8)
 800051c:	46bd      	mov	sp, r7
 800051e:	b002      	add	sp, #8
 8000520:	bd80      	pop	{r7, pc}
 8000522:	46c0      	nop			@ (mov r8, r8)
 8000524:	40021000 	.word	0x40021000

08000528 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000528:	b590      	push	{r4, r7, lr}
 800052a:	b08b      	sub	sp, #44	@ 0x2c
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000530:	2414      	movs	r4, #20
 8000532:	193b      	adds	r3, r7, r4
 8000534:	0018      	movs	r0, r3
 8000536:	2314      	movs	r3, #20
 8000538:	001a      	movs	r2, r3
 800053a:	2100      	movs	r1, #0
 800053c:	f001 fb06 	bl	8001b4c <memset>
  if(hcan->Instance==CAN)
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	4a1d      	ldr	r2, [pc, #116]	@ (80005bc <HAL_CAN_MspInit+0x94>)
 8000546:	4293      	cmp	r3, r2
 8000548:	d133      	bne.n	80005b2 <HAL_CAN_MspInit+0x8a>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800054a:	4b1d      	ldr	r3, [pc, #116]	@ (80005c0 <HAL_CAN_MspInit+0x98>)
 800054c:	69da      	ldr	r2, [r3, #28]
 800054e:	4b1c      	ldr	r3, [pc, #112]	@ (80005c0 <HAL_CAN_MspInit+0x98>)
 8000550:	2180      	movs	r1, #128	@ 0x80
 8000552:	0489      	lsls	r1, r1, #18
 8000554:	430a      	orrs	r2, r1
 8000556:	61da      	str	r2, [r3, #28]
 8000558:	4b19      	ldr	r3, [pc, #100]	@ (80005c0 <HAL_CAN_MspInit+0x98>)
 800055a:	69da      	ldr	r2, [r3, #28]
 800055c:	2380      	movs	r3, #128	@ 0x80
 800055e:	049b      	lsls	r3, r3, #18
 8000560:	4013      	ands	r3, r2
 8000562:	613b      	str	r3, [r7, #16]
 8000564:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000566:	4b16      	ldr	r3, [pc, #88]	@ (80005c0 <HAL_CAN_MspInit+0x98>)
 8000568:	695a      	ldr	r2, [r3, #20]
 800056a:	4b15      	ldr	r3, [pc, #84]	@ (80005c0 <HAL_CAN_MspInit+0x98>)
 800056c:	2180      	movs	r1, #128	@ 0x80
 800056e:	0289      	lsls	r1, r1, #10
 8000570:	430a      	orrs	r2, r1
 8000572:	615a      	str	r2, [r3, #20]
 8000574:	4b12      	ldr	r3, [pc, #72]	@ (80005c0 <HAL_CAN_MspInit+0x98>)
 8000576:	695a      	ldr	r2, [r3, #20]
 8000578:	2380      	movs	r3, #128	@ 0x80
 800057a:	029b      	lsls	r3, r3, #10
 800057c:	4013      	ands	r3, r2
 800057e:	60fb      	str	r3, [r7, #12]
 8000580:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000582:	193b      	adds	r3, r7, r4
 8000584:	22c0      	movs	r2, #192	@ 0xc0
 8000586:	0152      	lsls	r2, r2, #5
 8000588:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800058a:	0021      	movs	r1, r4
 800058c:	187b      	adds	r3, r7, r1
 800058e:	2202      	movs	r2, #2
 8000590:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000592:	187b      	adds	r3, r7, r1
 8000594:	2200      	movs	r2, #0
 8000596:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000598:	187b      	adds	r3, r7, r1
 800059a:	2203      	movs	r2, #3
 800059c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_CAN;
 800059e:	187b      	adds	r3, r7, r1
 80005a0:	2204      	movs	r2, #4
 80005a2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005a4:	187a      	adds	r2, r7, r1
 80005a6:	2390      	movs	r3, #144	@ 0x90
 80005a8:	05db      	lsls	r3, r3, #23
 80005aa:	0011      	movs	r1, r2
 80005ac:	0018      	movs	r0, r3
 80005ae:	f000 fbbd 	bl	8000d2c <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 80005b2:	46c0      	nop			@ (mov r8, r8)
 80005b4:	46bd      	mov	sp, r7
 80005b6:	b00b      	add	sp, #44	@ 0x2c
 80005b8:	bd90      	pop	{r4, r7, pc}
 80005ba:	46c0      	nop			@ (mov r8, r8)
 80005bc:	40006400 	.word	0x40006400
 80005c0:	40021000 	.word	0x40021000

080005c4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80005c4:	b590      	push	{r4, r7, lr}
 80005c6:	b08b      	sub	sp, #44	@ 0x2c
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005cc:	2414      	movs	r4, #20
 80005ce:	193b      	adds	r3, r7, r4
 80005d0:	0018      	movs	r0, r3
 80005d2:	2314      	movs	r3, #20
 80005d4:	001a      	movs	r2, r3
 80005d6:	2100      	movs	r1, #0
 80005d8:	f001 fab8 	bl	8001b4c <memset>
  if(hspi->Instance==SPI1)
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	4a1c      	ldr	r2, [pc, #112]	@ (8000654 <HAL_SPI_MspInit+0x90>)
 80005e2:	4293      	cmp	r3, r2
 80005e4:	d132      	bne.n	800064c <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80005e6:	4b1c      	ldr	r3, [pc, #112]	@ (8000658 <HAL_SPI_MspInit+0x94>)
 80005e8:	699a      	ldr	r2, [r3, #24]
 80005ea:	4b1b      	ldr	r3, [pc, #108]	@ (8000658 <HAL_SPI_MspInit+0x94>)
 80005ec:	2180      	movs	r1, #128	@ 0x80
 80005ee:	0149      	lsls	r1, r1, #5
 80005f0:	430a      	orrs	r2, r1
 80005f2:	619a      	str	r2, [r3, #24]
 80005f4:	4b18      	ldr	r3, [pc, #96]	@ (8000658 <HAL_SPI_MspInit+0x94>)
 80005f6:	699a      	ldr	r2, [r3, #24]
 80005f8:	2380      	movs	r3, #128	@ 0x80
 80005fa:	015b      	lsls	r3, r3, #5
 80005fc:	4013      	ands	r3, r2
 80005fe:	613b      	str	r3, [r7, #16]
 8000600:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000602:	4b15      	ldr	r3, [pc, #84]	@ (8000658 <HAL_SPI_MspInit+0x94>)
 8000604:	695a      	ldr	r2, [r3, #20]
 8000606:	4b14      	ldr	r3, [pc, #80]	@ (8000658 <HAL_SPI_MspInit+0x94>)
 8000608:	2180      	movs	r1, #128	@ 0x80
 800060a:	0289      	lsls	r1, r1, #10
 800060c:	430a      	orrs	r2, r1
 800060e:	615a      	str	r2, [r3, #20]
 8000610:	4b11      	ldr	r3, [pc, #68]	@ (8000658 <HAL_SPI_MspInit+0x94>)
 8000612:	695a      	ldr	r2, [r3, #20]
 8000614:	2380      	movs	r3, #128	@ 0x80
 8000616:	029b      	lsls	r3, r3, #10
 8000618:	4013      	ands	r3, r2
 800061a:	60fb      	str	r3, [r7, #12]
 800061c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800061e:	0021      	movs	r1, r4
 8000620:	187b      	adds	r3, r7, r1
 8000622:	22e0      	movs	r2, #224	@ 0xe0
 8000624:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000626:	187b      	adds	r3, r7, r1
 8000628:	2202      	movs	r2, #2
 800062a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800062c:	187b      	adds	r3, r7, r1
 800062e:	2200      	movs	r2, #0
 8000630:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000632:	187b      	adds	r3, r7, r1
 8000634:	2203      	movs	r2, #3
 8000636:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000638:	187b      	adds	r3, r7, r1
 800063a:	2200      	movs	r2, #0
 800063c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800063e:	187a      	adds	r2, r7, r1
 8000640:	2390      	movs	r3, #144	@ 0x90
 8000642:	05db      	lsls	r3, r3, #23
 8000644:	0011      	movs	r1, r2
 8000646:	0018      	movs	r0, r3
 8000648:	f000 fb70 	bl	8000d2c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800064c:	46c0      	nop			@ (mov r8, r8)
 800064e:	46bd      	mov	sp, r7
 8000650:	b00b      	add	sp, #44	@ 0x2c
 8000652:	bd90      	pop	{r4, r7, pc}
 8000654:	40013000 	.word	0x40013000
 8000658:	40021000 	.word	0x40021000

0800065c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000660:	46c0      	nop			@ (mov r8, r8)
 8000662:	e7fd      	b.n	8000660 <NMI_Handler+0x4>

08000664 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000668:	46c0      	nop			@ (mov r8, r8)
 800066a:	e7fd      	b.n	8000668 <HardFault_Handler+0x4>

0800066c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000670:	46c0      	nop			@ (mov r8, r8)
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}

08000676 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000676:	b580      	push	{r7, lr}
 8000678:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800067a:	46c0      	nop			@ (mov r8, r8)
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}

08000680 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000684:	f000 f892 	bl	80007ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000688:	46c0      	nop			@ (mov r8, r8)
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}

0800068e <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800068e:	b580      	push	{r7, lr}
 8000690:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000692:	46c0      	nop			@ (mov r8, r8)
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}

08000698 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000698:	4813      	ldr	r0, [pc, #76]	@ (80006e8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800069a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 800069c:	f7ff fff7 	bl	800068e <SystemInit>

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 80006a0:	4812      	ldr	r0, [pc, #72]	@ (80006ec <LoopForever+0x6>)
    LDR R1, [R0]
 80006a2:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 80006a4:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 80006a6:	4a12      	ldr	r2, [pc, #72]	@ (80006f0 <LoopForever+0xa>)
    CMP R1, R2
 80006a8:	4291      	cmp	r1, r2
    BNE ApplicationStart
 80006aa:	d105      	bne.n	80006b8 <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 80006ac:	4811      	ldr	r0, [pc, #68]	@ (80006f4 <LoopForever+0xe>)
    LDR R1,=0x00000001
 80006ae:	4912      	ldr	r1, [pc, #72]	@ (80006f8 <LoopForever+0x12>)
    STR R1, [R0]
 80006b0:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 80006b2:	4812      	ldr	r0, [pc, #72]	@ (80006fc <LoopForever+0x16>)
    LDR R1,=0x00000000
 80006b4:	4912      	ldr	r1, [pc, #72]	@ (8000700 <LoopForever+0x1a>)
    STR R1, [R0]
 80006b6:	6001      	str	r1, [r0, #0]

080006b8 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006b8:	4812      	ldr	r0, [pc, #72]	@ (8000704 <LoopForever+0x1e>)
  ldr r1, =_edata
 80006ba:	4913      	ldr	r1, [pc, #76]	@ (8000708 <LoopForever+0x22>)
  ldr r2, =_sidata
 80006bc:	4a13      	ldr	r2, [pc, #76]	@ (800070c <LoopForever+0x26>)
  movs r3, #0
 80006be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006c0:	e002      	b.n	80006c8 <LoopCopyDataInit>

080006c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006c6:	3304      	adds	r3, #4

080006c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006cc:	d3f9      	bcc.n	80006c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006ce:	4a10      	ldr	r2, [pc, #64]	@ (8000710 <LoopForever+0x2a>)
  ldr r4, =_ebss
 80006d0:	4c10      	ldr	r4, [pc, #64]	@ (8000714 <LoopForever+0x2e>)
  movs r3, #0
 80006d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006d4:	e001      	b.n	80006da <LoopFillZerobss>

080006d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006d8:	3204      	adds	r2, #4

080006da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006dc:	d3fb      	bcc.n	80006d6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80006de:	f001 fa3d 	bl	8001b5c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006e2:	f7ff fd9d 	bl	8000220 <main>

080006e6 <LoopForever>:

LoopForever:
    b LoopForever
 80006e6:	e7fe      	b.n	80006e6 <LoopForever>
  ldr   r0, =_estack
 80006e8:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 80006ec:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 80006f0:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 80006f4:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 80006f8:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 80006fc:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8000700:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8000704:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000708:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800070c:	08001bf4 	.word	0x08001bf4
  ldr r2, =_sbss
 8000710:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000714:	200000b8 	.word	0x200000b8

08000718 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000718:	e7fe      	b.n	8000718 <ADC1_IRQHandler>
	...

0800071c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000720:	4b07      	ldr	r3, [pc, #28]	@ (8000740 <HAL_Init+0x24>)
 8000722:	681a      	ldr	r2, [r3, #0]
 8000724:	4b06      	ldr	r3, [pc, #24]	@ (8000740 <HAL_Init+0x24>)
 8000726:	2110      	movs	r1, #16
 8000728:	430a      	orrs	r2, r1
 800072a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 800072c:	2003      	movs	r0, #3
 800072e:	f000 f809 	bl	8000744 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000732:	f7ff fed5 	bl	80004e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000736:	2300      	movs	r3, #0
}
 8000738:	0018      	movs	r0, r3
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
 800073e:	46c0      	nop			@ (mov r8, r8)
 8000740:	40022000 	.word	0x40022000

08000744 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000744:	b590      	push	{r4, r7, lr}
 8000746:	b083      	sub	sp, #12
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800074c:	4b14      	ldr	r3, [pc, #80]	@ (80007a0 <HAL_InitTick+0x5c>)
 800074e:	681c      	ldr	r4, [r3, #0]
 8000750:	4b14      	ldr	r3, [pc, #80]	@ (80007a4 <HAL_InitTick+0x60>)
 8000752:	781b      	ldrb	r3, [r3, #0]
 8000754:	0019      	movs	r1, r3
 8000756:	23fa      	movs	r3, #250	@ 0xfa
 8000758:	0098      	lsls	r0, r3, #2
 800075a:	f7ff fcd5 	bl	8000108 <__udivsi3>
 800075e:	0003      	movs	r3, r0
 8000760:	0019      	movs	r1, r3
 8000762:	0020      	movs	r0, r4
 8000764:	f7ff fcd0 	bl	8000108 <__udivsi3>
 8000768:	0003      	movs	r3, r0
 800076a:	0018      	movs	r0, r3
 800076c:	f000 fad1 	bl	8000d12 <HAL_SYSTICK_Config>
 8000770:	1e03      	subs	r3, r0, #0
 8000772:	d001      	beq.n	8000778 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000774:	2301      	movs	r3, #1
 8000776:	e00f      	b.n	8000798 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	2b03      	cmp	r3, #3
 800077c:	d80b      	bhi.n	8000796 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800077e:	6879      	ldr	r1, [r7, #4]
 8000780:	2301      	movs	r3, #1
 8000782:	425b      	negs	r3, r3
 8000784:	2200      	movs	r2, #0
 8000786:	0018      	movs	r0, r3
 8000788:	f000 faae 	bl	8000ce8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800078c:	4b06      	ldr	r3, [pc, #24]	@ (80007a8 <HAL_InitTick+0x64>)
 800078e:	687a      	ldr	r2, [r7, #4]
 8000790:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000792:	2300      	movs	r3, #0
 8000794:	e000      	b.n	8000798 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000796:	2301      	movs	r3, #1
}
 8000798:	0018      	movs	r0, r3
 800079a:	46bd      	mov	sp, r7
 800079c:	b003      	add	sp, #12
 800079e:	bd90      	pop	{r4, r7, pc}
 80007a0:	20000000 	.word	0x20000000
 80007a4:	20000008 	.word	0x20000008
 80007a8:	20000004 	.word	0x20000004

080007ac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007b0:	4b05      	ldr	r3, [pc, #20]	@ (80007c8 <HAL_IncTick+0x1c>)
 80007b2:	781b      	ldrb	r3, [r3, #0]
 80007b4:	001a      	movs	r2, r3
 80007b6:	4b05      	ldr	r3, [pc, #20]	@ (80007cc <HAL_IncTick+0x20>)
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	18d2      	adds	r2, r2, r3
 80007bc:	4b03      	ldr	r3, [pc, #12]	@ (80007cc <HAL_IncTick+0x20>)
 80007be:	601a      	str	r2, [r3, #0]
}
 80007c0:	46c0      	nop			@ (mov r8, r8)
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	46c0      	nop			@ (mov r8, r8)
 80007c8:	20000008 	.word	0x20000008
 80007cc:	200000b4 	.word	0x200000b4

080007d0 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
  return uwTick;
 80007d4:	4b02      	ldr	r3, [pc, #8]	@ (80007e0 <HAL_GetTick+0x10>)
 80007d6:	681b      	ldr	r3, [r3, #0]
}
 80007d8:	0018      	movs	r0, r3
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	46c0      	nop			@ (mov r8, r8)
 80007e0:	200000b4 	.word	0x200000b4

080007e4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b084      	sub	sp, #16
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d101      	bne.n	80007f6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80007f2:	2301      	movs	r3, #1
 80007f4:	e0f0      	b.n	80009d8 <HAL_CAN_Init+0x1f4>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	2220      	movs	r2, #32
 80007fa:	5c9b      	ldrb	r3, [r3, r2]
 80007fc:	b2db      	uxtb	r3, r3
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d103      	bne.n	800080a <HAL_CAN_Init+0x26>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	0018      	movs	r0, r3
 8000806:	f7ff fe8f 	bl	8000528 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	681a      	ldr	r2, [r3, #0]
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	2101      	movs	r1, #1
 8000816:	430a      	orrs	r2, r1
 8000818:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800081a:	f7ff ffd9 	bl	80007d0 <HAL_GetTick>
 800081e:	0003      	movs	r3, r0
 8000820:	60fb      	str	r3, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000822:	e013      	b.n	800084c <HAL_CAN_Init+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000824:	f7ff ffd4 	bl	80007d0 <HAL_GetTick>
 8000828:	0002      	movs	r2, r0
 800082a:	68fb      	ldr	r3, [r7, #12]
 800082c:	1ad3      	subs	r3, r2, r3
 800082e:	2b0a      	cmp	r3, #10
 8000830:	d90c      	bls.n	800084c <HAL_CAN_Init+0x68>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000836:	2280      	movs	r2, #128	@ 0x80
 8000838:	0292      	lsls	r2, r2, #10
 800083a:	431a      	orrs	r2, r3
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	2220      	movs	r2, #32
 8000844:	2105      	movs	r1, #5
 8000846:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8000848:	2301      	movs	r3, #1
 800084a:	e0c5      	b.n	80009d8 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	685b      	ldr	r3, [r3, #4]
 8000852:	2201      	movs	r2, #1
 8000854:	4013      	ands	r3, r2
 8000856:	d0e5      	beq.n	8000824 <HAL_CAN_Init+0x40>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	681a      	ldr	r2, [r3, #0]
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	2102      	movs	r1, #2
 8000864:	438a      	bics	r2, r1
 8000866:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000868:	f7ff ffb2 	bl	80007d0 <HAL_GetTick>
 800086c:	0003      	movs	r3, r0
 800086e:	60fb      	str	r3, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000870:	e013      	b.n	800089a <HAL_CAN_Init+0xb6>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000872:	f7ff ffad 	bl	80007d0 <HAL_GetTick>
 8000876:	0002      	movs	r2, r0
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	1ad3      	subs	r3, r2, r3
 800087c:	2b0a      	cmp	r3, #10
 800087e:	d90c      	bls.n	800089a <HAL_CAN_Init+0xb6>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000884:	2280      	movs	r2, #128	@ 0x80
 8000886:	0292      	lsls	r2, r2, #10
 8000888:	431a      	orrs	r2, r3
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	2220      	movs	r2, #32
 8000892:	2105      	movs	r1, #5
 8000894:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8000896:	2301      	movs	r3, #1
 8000898:	e09e      	b.n	80009d8 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	685b      	ldr	r3, [r3, #4]
 80008a0:	2202      	movs	r2, #2
 80008a2:	4013      	ands	r3, r2
 80008a4:	d1e5      	bne.n	8000872 <HAL_CAN_Init+0x8e>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	7e1b      	ldrb	r3, [r3, #24]
 80008aa:	2b01      	cmp	r3, #1
 80008ac:	d108      	bne.n	80008c0 <HAL_CAN_Init+0xdc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	681a      	ldr	r2, [r3, #0]
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	2180      	movs	r1, #128	@ 0x80
 80008ba:	430a      	orrs	r2, r1
 80008bc:	601a      	str	r2, [r3, #0]
 80008be:	e007      	b.n	80008d0 <HAL_CAN_Init+0xec>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	681a      	ldr	r2, [r3, #0]
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	2180      	movs	r1, #128	@ 0x80
 80008cc:	438a      	bics	r2, r1
 80008ce:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	7e5b      	ldrb	r3, [r3, #25]
 80008d4:	2b01      	cmp	r3, #1
 80008d6:	d108      	bne.n	80008ea <HAL_CAN_Init+0x106>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	681a      	ldr	r2, [r3, #0]
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	2140      	movs	r1, #64	@ 0x40
 80008e4:	430a      	orrs	r2, r1
 80008e6:	601a      	str	r2, [r3, #0]
 80008e8:	e007      	b.n	80008fa <HAL_CAN_Init+0x116>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	681a      	ldr	r2, [r3, #0]
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	2140      	movs	r1, #64	@ 0x40
 80008f6:	438a      	bics	r2, r1
 80008f8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	7e9b      	ldrb	r3, [r3, #26]
 80008fe:	2b01      	cmp	r3, #1
 8000900:	d108      	bne.n	8000914 <HAL_CAN_Init+0x130>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	681a      	ldr	r2, [r3, #0]
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	2120      	movs	r1, #32
 800090e:	430a      	orrs	r2, r1
 8000910:	601a      	str	r2, [r3, #0]
 8000912:	e007      	b.n	8000924 <HAL_CAN_Init+0x140>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	681a      	ldr	r2, [r3, #0]
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	2120      	movs	r1, #32
 8000920:	438a      	bics	r2, r1
 8000922:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	7edb      	ldrb	r3, [r3, #27]
 8000928:	2b01      	cmp	r3, #1
 800092a:	d108      	bne.n	800093e <HAL_CAN_Init+0x15a>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	681a      	ldr	r2, [r3, #0]
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	2110      	movs	r1, #16
 8000938:	438a      	bics	r2, r1
 800093a:	601a      	str	r2, [r3, #0]
 800093c:	e007      	b.n	800094e <HAL_CAN_Init+0x16a>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	681a      	ldr	r2, [r3, #0]
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	2110      	movs	r1, #16
 800094a:	430a      	orrs	r2, r1
 800094c:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	7f1b      	ldrb	r3, [r3, #28]
 8000952:	2b01      	cmp	r3, #1
 8000954:	d108      	bne.n	8000968 <HAL_CAN_Init+0x184>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	681a      	ldr	r2, [r3, #0]
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	2108      	movs	r1, #8
 8000962:	430a      	orrs	r2, r1
 8000964:	601a      	str	r2, [r3, #0]
 8000966:	e007      	b.n	8000978 <HAL_CAN_Init+0x194>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	681a      	ldr	r2, [r3, #0]
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	2108      	movs	r1, #8
 8000974:	438a      	bics	r2, r1
 8000976:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	7f5b      	ldrb	r3, [r3, #29]
 800097c:	2b01      	cmp	r3, #1
 800097e:	d108      	bne.n	8000992 <HAL_CAN_Init+0x1ae>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	681a      	ldr	r2, [r3, #0]
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	2104      	movs	r1, #4
 800098c:	430a      	orrs	r2, r1
 800098e:	601a      	str	r2, [r3, #0]
 8000990:	e007      	b.n	80009a2 <HAL_CAN_Init+0x1be>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	681a      	ldr	r2, [r3, #0]
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	2104      	movs	r1, #4
 800099e:	438a      	bics	r2, r1
 80009a0:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	689a      	ldr	r2, [r3, #8]
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	68db      	ldr	r3, [r3, #12]
 80009aa:	431a      	orrs	r2, r3
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	691b      	ldr	r3, [r3, #16]
 80009b0:	431a      	orrs	r2, r3
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	695b      	ldr	r3, [r3, #20]
 80009b6:	431a      	orrs	r2, r3
 80009b8:	0011      	movs	r1, r2
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	685b      	ldr	r3, [r3, #4]
 80009be:	1e5a      	subs	r2, r3, #1
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	430a      	orrs	r2, r1
 80009c6:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	2200      	movs	r2, #0
 80009cc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	2220      	movs	r2, #32
 80009d2:	2101      	movs	r1, #1
 80009d4:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80009d6:	2300      	movs	r3, #0
}
 80009d8:	0018      	movs	r0, r3
 80009da:	46bd      	mov	sp, r7
 80009dc:	b004      	add	sp, #16
 80009de:	bd80      	pop	{r7, pc}

080009e0 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b086      	sub	sp, #24
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
 80009e8:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80009f0:	2013      	movs	r0, #19
 80009f2:	183b      	adds	r3, r7, r0
 80009f4:	687a      	ldr	r2, [r7, #4]
 80009f6:	2120      	movs	r1, #32
 80009f8:	5c52      	ldrb	r2, [r2, r1]
 80009fa:	701a      	strb	r2, [r3, #0]

  if ((state == HAL_CAN_STATE_READY) ||
 80009fc:	0002      	movs	r2, r0
 80009fe:	18bb      	adds	r3, r7, r2
 8000a00:	781b      	ldrb	r3, [r3, #0]
 8000a02:	2b01      	cmp	r3, #1
 8000a04:	d004      	beq.n	8000a10 <HAL_CAN_ConfigFilter+0x30>
 8000a06:	18bb      	adds	r3, r7, r2
 8000a08:	781b      	ldrb	r3, [r3, #0]
 8000a0a:	2b02      	cmp	r3, #2
 8000a0c:	d000      	beq.n	8000a10 <HAL_CAN_ConfigFilter+0x30>
 8000a0e:	e0cd      	b.n	8000bac <HAL_CAN_ConfigFilter+0x1cc>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000a10:	697a      	ldr	r2, [r7, #20]
 8000a12:	2380      	movs	r3, #128	@ 0x80
 8000a14:	009b      	lsls	r3, r3, #2
 8000a16:	58d3      	ldr	r3, [r2, r3]
 8000a18:	2201      	movs	r2, #1
 8000a1a:	431a      	orrs	r2, r3
 8000a1c:	0011      	movs	r1, r2
 8000a1e:	697a      	ldr	r2, [r7, #20]
 8000a20:	2380      	movs	r3, #128	@ 0x80
 8000a22:	009b      	lsls	r3, r3, #2
 8000a24:	50d1      	str	r1, [r2, r3]

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000a26:	683b      	ldr	r3, [r7, #0]
 8000a28:	695b      	ldr	r3, [r3, #20]
 8000a2a:	221f      	movs	r2, #31
 8000a2c:	4013      	ands	r3, r2
 8000a2e:	2201      	movs	r2, #1
 8000a30:	409a      	lsls	r2, r3
 8000a32:	0013      	movs	r3, r2
 8000a34:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000a36:	697a      	ldr	r2, [r7, #20]
 8000a38:	2387      	movs	r3, #135	@ 0x87
 8000a3a:	009b      	lsls	r3, r3, #2
 8000a3c:	58d3      	ldr	r3, [r2, r3]
 8000a3e:	68fa      	ldr	r2, [r7, #12]
 8000a40:	43d2      	mvns	r2, r2
 8000a42:	401a      	ands	r2, r3
 8000a44:	0011      	movs	r1, r2
 8000a46:	697a      	ldr	r2, [r7, #20]
 8000a48:	2387      	movs	r3, #135	@ 0x87
 8000a4a:	009b      	lsls	r3, r3, #2
 8000a4c:	50d1      	str	r1, [r2, r3]

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000a4e:	683b      	ldr	r3, [r7, #0]
 8000a50:	69db      	ldr	r3, [r3, #28]
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d129      	bne.n	8000aaa <HAL_CAN_ConfigFilter+0xca>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000a56:	697a      	ldr	r2, [r7, #20]
 8000a58:	2383      	movs	r3, #131	@ 0x83
 8000a5a:	009b      	lsls	r3, r3, #2
 8000a5c:	58d3      	ldr	r3, [r2, r3]
 8000a5e:	68fa      	ldr	r2, [r7, #12]
 8000a60:	43d2      	mvns	r2, r2
 8000a62:	401a      	ands	r2, r3
 8000a64:	0011      	movs	r1, r2
 8000a66:	697a      	ldr	r2, [r7, #20]
 8000a68:	2383      	movs	r3, #131	@ 0x83
 8000a6a:	009b      	lsls	r3, r3, #2
 8000a6c:	50d1      	str	r1, [r2, r3]

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000a6e:	683b      	ldr	r3, [r7, #0]
 8000a70:	68db      	ldr	r3, [r3, #12]
 8000a72:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000a74:	683b      	ldr	r3, [r7, #0]
 8000a76:	685b      	ldr	r3, [r3, #4]
 8000a78:	041b      	lsls	r3, r3, #16
 8000a7a:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000a7c:	683b      	ldr	r3, [r7, #0]
 8000a7e:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000a80:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000a82:	697b      	ldr	r3, [r7, #20]
 8000a84:	3248      	adds	r2, #72	@ 0x48
 8000a86:	00d2      	lsls	r2, r2, #3
 8000a88:	50d1      	str	r1, [r2, r3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000a8a:	683b      	ldr	r3, [r7, #0]
 8000a8c:	689b      	ldr	r3, [r3, #8]
 8000a8e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000a90:	683b      	ldr	r3, [r7, #0]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	041b      	lsls	r3, r3, #16
 8000a96:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000a98:	683b      	ldr	r3, [r7, #0]
 8000a9a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000a9c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000a9e:	6979      	ldr	r1, [r7, #20]
 8000aa0:	3348      	adds	r3, #72	@ 0x48
 8000aa2:	00db      	lsls	r3, r3, #3
 8000aa4:	18cb      	adds	r3, r1, r3
 8000aa6:	3304      	adds	r3, #4
 8000aa8:	601a      	str	r2, [r3, #0]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000aaa:	683b      	ldr	r3, [r7, #0]
 8000aac:	69db      	ldr	r3, [r3, #28]
 8000aae:	2b01      	cmp	r3, #1
 8000ab0:	d128      	bne.n	8000b04 <HAL_CAN_ConfigFilter+0x124>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000ab2:	697a      	ldr	r2, [r7, #20]
 8000ab4:	2383      	movs	r3, #131	@ 0x83
 8000ab6:	009b      	lsls	r3, r3, #2
 8000ab8:	58d2      	ldr	r2, [r2, r3]
 8000aba:	68fb      	ldr	r3, [r7, #12]
 8000abc:	431a      	orrs	r2, r3
 8000abe:	0011      	movs	r1, r2
 8000ac0:	697a      	ldr	r2, [r7, #20]
 8000ac2:	2383      	movs	r3, #131	@ 0x83
 8000ac4:	009b      	lsls	r3, r3, #2
 8000ac6:	50d1      	str	r1, [r2, r3]

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000ac8:	683b      	ldr	r3, [r7, #0]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	685b      	ldr	r3, [r3, #4]
 8000ad2:	041b      	lsls	r3, r3, #16
 8000ad4:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000ad6:	683b      	ldr	r3, [r7, #0]
 8000ad8:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000ada:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000adc:	697b      	ldr	r3, [r7, #20]
 8000ade:	3248      	adds	r2, #72	@ 0x48
 8000ae0:	00d2      	lsls	r2, r2, #3
 8000ae2:	50d1      	str	r1, [r2, r3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000ae4:	683b      	ldr	r3, [r7, #0]
 8000ae6:	689b      	ldr	r3, [r3, #8]
 8000ae8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000aea:	683b      	ldr	r3, [r7, #0]
 8000aec:	68db      	ldr	r3, [r3, #12]
 8000aee:	041b      	lsls	r3, r3, #16
 8000af0:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000af2:	683b      	ldr	r3, [r7, #0]
 8000af4:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000af6:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000af8:	6979      	ldr	r1, [r7, #20]
 8000afa:	3348      	adds	r3, #72	@ 0x48
 8000afc:	00db      	lsls	r3, r3, #3
 8000afe:	18cb      	adds	r3, r1, r3
 8000b00:	3304      	adds	r3, #4
 8000b02:	601a      	str	r2, [r3, #0]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000b04:	683b      	ldr	r3, [r7, #0]
 8000b06:	699b      	ldr	r3, [r3, #24]
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d10c      	bne.n	8000b26 <HAL_CAN_ConfigFilter+0x146>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000b0c:	697a      	ldr	r2, [r7, #20]
 8000b0e:	2381      	movs	r3, #129	@ 0x81
 8000b10:	009b      	lsls	r3, r3, #2
 8000b12:	58d3      	ldr	r3, [r2, r3]
 8000b14:	68fa      	ldr	r2, [r7, #12]
 8000b16:	43d2      	mvns	r2, r2
 8000b18:	401a      	ands	r2, r3
 8000b1a:	0011      	movs	r1, r2
 8000b1c:	697a      	ldr	r2, [r7, #20]
 8000b1e:	2381      	movs	r3, #129	@ 0x81
 8000b20:	009b      	lsls	r3, r3, #2
 8000b22:	50d1      	str	r1, [r2, r3]
 8000b24:	e00a      	b.n	8000b3c <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000b26:	697a      	ldr	r2, [r7, #20]
 8000b28:	2381      	movs	r3, #129	@ 0x81
 8000b2a:	009b      	lsls	r3, r3, #2
 8000b2c:	58d2      	ldr	r2, [r2, r3]
 8000b2e:	68fb      	ldr	r3, [r7, #12]
 8000b30:	431a      	orrs	r2, r3
 8000b32:	0011      	movs	r1, r2
 8000b34:	697a      	ldr	r2, [r7, #20]
 8000b36:	2381      	movs	r3, #129	@ 0x81
 8000b38:	009b      	lsls	r3, r3, #2
 8000b3a:	50d1      	str	r1, [r2, r3]
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	691b      	ldr	r3, [r3, #16]
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d10c      	bne.n	8000b5e <HAL_CAN_ConfigFilter+0x17e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000b44:	697a      	ldr	r2, [r7, #20]
 8000b46:	2385      	movs	r3, #133	@ 0x85
 8000b48:	009b      	lsls	r3, r3, #2
 8000b4a:	58d3      	ldr	r3, [r2, r3]
 8000b4c:	68fa      	ldr	r2, [r7, #12]
 8000b4e:	43d2      	mvns	r2, r2
 8000b50:	401a      	ands	r2, r3
 8000b52:	0011      	movs	r1, r2
 8000b54:	697a      	ldr	r2, [r7, #20]
 8000b56:	2385      	movs	r3, #133	@ 0x85
 8000b58:	009b      	lsls	r3, r3, #2
 8000b5a:	50d1      	str	r1, [r2, r3]
 8000b5c:	e00a      	b.n	8000b74 <HAL_CAN_ConfigFilter+0x194>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000b5e:	697a      	ldr	r2, [r7, #20]
 8000b60:	2385      	movs	r3, #133	@ 0x85
 8000b62:	009b      	lsls	r3, r3, #2
 8000b64:	58d2      	ldr	r2, [r2, r3]
 8000b66:	68fb      	ldr	r3, [r7, #12]
 8000b68:	431a      	orrs	r2, r3
 8000b6a:	0011      	movs	r1, r2
 8000b6c:	697a      	ldr	r2, [r7, #20]
 8000b6e:	2385      	movs	r3, #133	@ 0x85
 8000b70:	009b      	lsls	r3, r3, #2
 8000b72:	50d1      	str	r1, [r2, r3]
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000b74:	683b      	ldr	r3, [r7, #0]
 8000b76:	6a1b      	ldr	r3, [r3, #32]
 8000b78:	2b01      	cmp	r3, #1
 8000b7a:	d10a      	bne.n	8000b92 <HAL_CAN_ConfigFilter+0x1b2>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000b7c:	697a      	ldr	r2, [r7, #20]
 8000b7e:	2387      	movs	r3, #135	@ 0x87
 8000b80:	009b      	lsls	r3, r3, #2
 8000b82:	58d2      	ldr	r2, [r2, r3]
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	431a      	orrs	r2, r3
 8000b88:	0011      	movs	r1, r2
 8000b8a:	697a      	ldr	r2, [r7, #20]
 8000b8c:	2387      	movs	r3, #135	@ 0x87
 8000b8e:	009b      	lsls	r3, r3, #2
 8000b90:	50d1      	str	r1, [r2, r3]
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000b92:	697a      	ldr	r2, [r7, #20]
 8000b94:	2380      	movs	r3, #128	@ 0x80
 8000b96:	009b      	lsls	r3, r3, #2
 8000b98:	58d3      	ldr	r3, [r2, r3]
 8000b9a:	2201      	movs	r2, #1
 8000b9c:	4393      	bics	r3, r2
 8000b9e:	0019      	movs	r1, r3
 8000ba0:	697a      	ldr	r2, [r7, #20]
 8000ba2:	2380      	movs	r3, #128	@ 0x80
 8000ba4:	009b      	lsls	r3, r3, #2
 8000ba6:	50d1      	str	r1, [r2, r3]

    /* Return function status */
    return HAL_OK;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	e007      	b.n	8000bbc <HAL_CAN_ConfigFilter+0x1dc>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000bb0:	2280      	movs	r2, #128	@ 0x80
 8000bb2:	02d2      	lsls	r2, r2, #11
 8000bb4:	431a      	orrs	r2, r3
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000bba:	2301      	movs	r3, #1
  }
}
 8000bbc:	0018      	movs	r0, r3
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	b006      	add	sp, #24
 8000bc2:	bd80      	pop	{r7, pc}

08000bc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bc4:	b590      	push	{r4, r7, lr}
 8000bc6:	b083      	sub	sp, #12
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	0002      	movs	r2, r0
 8000bcc:	6039      	str	r1, [r7, #0]
 8000bce:	1dfb      	adds	r3, r7, #7
 8000bd0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000bd2:	1dfb      	adds	r3, r7, #7
 8000bd4:	781b      	ldrb	r3, [r3, #0]
 8000bd6:	2b7f      	cmp	r3, #127	@ 0x7f
 8000bd8:	d828      	bhi.n	8000c2c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bda:	4a2f      	ldr	r2, [pc, #188]	@ (8000c98 <__NVIC_SetPriority+0xd4>)
 8000bdc:	1dfb      	adds	r3, r7, #7
 8000bde:	781b      	ldrb	r3, [r3, #0]
 8000be0:	b25b      	sxtb	r3, r3
 8000be2:	089b      	lsrs	r3, r3, #2
 8000be4:	33c0      	adds	r3, #192	@ 0xc0
 8000be6:	009b      	lsls	r3, r3, #2
 8000be8:	589b      	ldr	r3, [r3, r2]
 8000bea:	1dfa      	adds	r2, r7, #7
 8000bec:	7812      	ldrb	r2, [r2, #0]
 8000bee:	0011      	movs	r1, r2
 8000bf0:	2203      	movs	r2, #3
 8000bf2:	400a      	ands	r2, r1
 8000bf4:	00d2      	lsls	r2, r2, #3
 8000bf6:	21ff      	movs	r1, #255	@ 0xff
 8000bf8:	4091      	lsls	r1, r2
 8000bfa:	000a      	movs	r2, r1
 8000bfc:	43d2      	mvns	r2, r2
 8000bfe:	401a      	ands	r2, r3
 8000c00:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c02:	683b      	ldr	r3, [r7, #0]
 8000c04:	019b      	lsls	r3, r3, #6
 8000c06:	22ff      	movs	r2, #255	@ 0xff
 8000c08:	401a      	ands	r2, r3
 8000c0a:	1dfb      	adds	r3, r7, #7
 8000c0c:	781b      	ldrb	r3, [r3, #0]
 8000c0e:	0018      	movs	r0, r3
 8000c10:	2303      	movs	r3, #3
 8000c12:	4003      	ands	r3, r0
 8000c14:	00db      	lsls	r3, r3, #3
 8000c16:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c18:	481f      	ldr	r0, [pc, #124]	@ (8000c98 <__NVIC_SetPriority+0xd4>)
 8000c1a:	1dfb      	adds	r3, r7, #7
 8000c1c:	781b      	ldrb	r3, [r3, #0]
 8000c1e:	b25b      	sxtb	r3, r3
 8000c20:	089b      	lsrs	r3, r3, #2
 8000c22:	430a      	orrs	r2, r1
 8000c24:	33c0      	adds	r3, #192	@ 0xc0
 8000c26:	009b      	lsls	r3, r3, #2
 8000c28:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000c2a:	e031      	b.n	8000c90 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c2c:	4a1b      	ldr	r2, [pc, #108]	@ (8000c9c <__NVIC_SetPriority+0xd8>)
 8000c2e:	1dfb      	adds	r3, r7, #7
 8000c30:	781b      	ldrb	r3, [r3, #0]
 8000c32:	0019      	movs	r1, r3
 8000c34:	230f      	movs	r3, #15
 8000c36:	400b      	ands	r3, r1
 8000c38:	3b08      	subs	r3, #8
 8000c3a:	089b      	lsrs	r3, r3, #2
 8000c3c:	3306      	adds	r3, #6
 8000c3e:	009b      	lsls	r3, r3, #2
 8000c40:	18d3      	adds	r3, r2, r3
 8000c42:	3304      	adds	r3, #4
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	1dfa      	adds	r2, r7, #7
 8000c48:	7812      	ldrb	r2, [r2, #0]
 8000c4a:	0011      	movs	r1, r2
 8000c4c:	2203      	movs	r2, #3
 8000c4e:	400a      	ands	r2, r1
 8000c50:	00d2      	lsls	r2, r2, #3
 8000c52:	21ff      	movs	r1, #255	@ 0xff
 8000c54:	4091      	lsls	r1, r2
 8000c56:	000a      	movs	r2, r1
 8000c58:	43d2      	mvns	r2, r2
 8000c5a:	401a      	ands	r2, r3
 8000c5c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c5e:	683b      	ldr	r3, [r7, #0]
 8000c60:	019b      	lsls	r3, r3, #6
 8000c62:	22ff      	movs	r2, #255	@ 0xff
 8000c64:	401a      	ands	r2, r3
 8000c66:	1dfb      	adds	r3, r7, #7
 8000c68:	781b      	ldrb	r3, [r3, #0]
 8000c6a:	0018      	movs	r0, r3
 8000c6c:	2303      	movs	r3, #3
 8000c6e:	4003      	ands	r3, r0
 8000c70:	00db      	lsls	r3, r3, #3
 8000c72:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c74:	4809      	ldr	r0, [pc, #36]	@ (8000c9c <__NVIC_SetPriority+0xd8>)
 8000c76:	1dfb      	adds	r3, r7, #7
 8000c78:	781b      	ldrb	r3, [r3, #0]
 8000c7a:	001c      	movs	r4, r3
 8000c7c:	230f      	movs	r3, #15
 8000c7e:	4023      	ands	r3, r4
 8000c80:	3b08      	subs	r3, #8
 8000c82:	089b      	lsrs	r3, r3, #2
 8000c84:	430a      	orrs	r2, r1
 8000c86:	3306      	adds	r3, #6
 8000c88:	009b      	lsls	r3, r3, #2
 8000c8a:	18c3      	adds	r3, r0, r3
 8000c8c:	3304      	adds	r3, #4
 8000c8e:	601a      	str	r2, [r3, #0]
}
 8000c90:	46c0      	nop			@ (mov r8, r8)
 8000c92:	46bd      	mov	sp, r7
 8000c94:	b003      	add	sp, #12
 8000c96:	bd90      	pop	{r4, r7, pc}
 8000c98:	e000e100 	.word	0xe000e100
 8000c9c:	e000ed00 	.word	0xe000ed00

08000ca0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b082      	sub	sp, #8
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	1e5a      	subs	r2, r3, #1
 8000cac:	2380      	movs	r3, #128	@ 0x80
 8000cae:	045b      	lsls	r3, r3, #17
 8000cb0:	429a      	cmp	r2, r3
 8000cb2:	d301      	bcc.n	8000cb8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	e010      	b.n	8000cda <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cb8:	4b0a      	ldr	r3, [pc, #40]	@ (8000ce4 <SysTick_Config+0x44>)
 8000cba:	687a      	ldr	r2, [r7, #4]
 8000cbc:	3a01      	subs	r2, #1
 8000cbe:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	425b      	negs	r3, r3
 8000cc4:	2103      	movs	r1, #3
 8000cc6:	0018      	movs	r0, r3
 8000cc8:	f7ff ff7c 	bl	8000bc4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ccc:	4b05      	ldr	r3, [pc, #20]	@ (8000ce4 <SysTick_Config+0x44>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cd2:	4b04      	ldr	r3, [pc, #16]	@ (8000ce4 <SysTick_Config+0x44>)
 8000cd4:	2207      	movs	r2, #7
 8000cd6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cd8:	2300      	movs	r3, #0
}
 8000cda:	0018      	movs	r0, r3
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	b002      	add	sp, #8
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	46c0      	nop			@ (mov r8, r8)
 8000ce4:	e000e010 	.word	0xe000e010

08000ce8 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b084      	sub	sp, #16
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	60b9      	str	r1, [r7, #8]
 8000cf0:	607a      	str	r2, [r7, #4]
 8000cf2:	210f      	movs	r1, #15
 8000cf4:	187b      	adds	r3, r7, r1
 8000cf6:	1c02      	adds	r2, r0, #0
 8000cf8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000cfa:	68ba      	ldr	r2, [r7, #8]
 8000cfc:	187b      	adds	r3, r7, r1
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	b25b      	sxtb	r3, r3
 8000d02:	0011      	movs	r1, r2
 8000d04:	0018      	movs	r0, r3
 8000d06:	f7ff ff5d 	bl	8000bc4 <__NVIC_SetPriority>
}
 8000d0a:	46c0      	nop			@ (mov r8, r8)
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	b004      	add	sp, #16
 8000d10:	bd80      	pop	{r7, pc}

08000d12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d12:	b580      	push	{r7, lr}
 8000d14:	b082      	sub	sp, #8
 8000d16:	af00      	add	r7, sp, #0
 8000d18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	0018      	movs	r0, r3
 8000d1e:	f7ff ffbf 	bl	8000ca0 <SysTick_Config>
 8000d22:	0003      	movs	r3, r0
}
 8000d24:	0018      	movs	r0, r3
 8000d26:	46bd      	mov	sp, r7
 8000d28:	b002      	add	sp, #8
 8000d2a:	bd80      	pop	{r7, pc}

08000d2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b086      	sub	sp, #24
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
 8000d34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d36:	2300      	movs	r3, #0
 8000d38:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d3a:	e149      	b.n	8000fd0 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	2101      	movs	r1, #1
 8000d42:	697a      	ldr	r2, [r7, #20]
 8000d44:	4091      	lsls	r1, r2
 8000d46:	000a      	movs	r2, r1
 8000d48:	4013      	ands	r3, r2
 8000d4a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d100      	bne.n	8000d54 <HAL_GPIO_Init+0x28>
 8000d52:	e13a      	b.n	8000fca <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	685b      	ldr	r3, [r3, #4]
 8000d58:	2203      	movs	r2, #3
 8000d5a:	4013      	ands	r3, r2
 8000d5c:	2b01      	cmp	r3, #1
 8000d5e:	d005      	beq.n	8000d6c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	685b      	ldr	r3, [r3, #4]
 8000d64:	2203      	movs	r2, #3
 8000d66:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000d68:	2b02      	cmp	r3, #2
 8000d6a:	d130      	bne.n	8000dce <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	689b      	ldr	r3, [r3, #8]
 8000d70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000d72:	697b      	ldr	r3, [r7, #20]
 8000d74:	005b      	lsls	r3, r3, #1
 8000d76:	2203      	movs	r2, #3
 8000d78:	409a      	lsls	r2, r3
 8000d7a:	0013      	movs	r3, r2
 8000d7c:	43da      	mvns	r2, r3
 8000d7e:	693b      	ldr	r3, [r7, #16]
 8000d80:	4013      	ands	r3, r2
 8000d82:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	68da      	ldr	r2, [r3, #12]
 8000d88:	697b      	ldr	r3, [r7, #20]
 8000d8a:	005b      	lsls	r3, r3, #1
 8000d8c:	409a      	lsls	r2, r3
 8000d8e:	0013      	movs	r3, r2
 8000d90:	693a      	ldr	r2, [r7, #16]
 8000d92:	4313      	orrs	r3, r2
 8000d94:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	693a      	ldr	r2, [r7, #16]
 8000d9a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	685b      	ldr	r3, [r3, #4]
 8000da0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000da2:	2201      	movs	r2, #1
 8000da4:	697b      	ldr	r3, [r7, #20]
 8000da6:	409a      	lsls	r2, r3
 8000da8:	0013      	movs	r3, r2
 8000daa:	43da      	mvns	r2, r3
 8000dac:	693b      	ldr	r3, [r7, #16]
 8000dae:	4013      	ands	r3, r2
 8000db0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	685b      	ldr	r3, [r3, #4]
 8000db6:	091b      	lsrs	r3, r3, #4
 8000db8:	2201      	movs	r2, #1
 8000dba:	401a      	ands	r2, r3
 8000dbc:	697b      	ldr	r3, [r7, #20]
 8000dbe:	409a      	lsls	r2, r3
 8000dc0:	0013      	movs	r3, r2
 8000dc2:	693a      	ldr	r2, [r7, #16]
 8000dc4:	4313      	orrs	r3, r2
 8000dc6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	693a      	ldr	r2, [r7, #16]
 8000dcc:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	685b      	ldr	r3, [r3, #4]
 8000dd2:	2203      	movs	r2, #3
 8000dd4:	4013      	ands	r3, r2
 8000dd6:	2b03      	cmp	r3, #3
 8000dd8:	d017      	beq.n	8000e0a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	68db      	ldr	r3, [r3, #12]
 8000dde:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000de0:	697b      	ldr	r3, [r7, #20]
 8000de2:	005b      	lsls	r3, r3, #1
 8000de4:	2203      	movs	r2, #3
 8000de6:	409a      	lsls	r2, r3
 8000de8:	0013      	movs	r3, r2
 8000dea:	43da      	mvns	r2, r3
 8000dec:	693b      	ldr	r3, [r7, #16]
 8000dee:	4013      	ands	r3, r2
 8000df0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	689a      	ldr	r2, [r3, #8]
 8000df6:	697b      	ldr	r3, [r7, #20]
 8000df8:	005b      	lsls	r3, r3, #1
 8000dfa:	409a      	lsls	r2, r3
 8000dfc:	0013      	movs	r3, r2
 8000dfe:	693a      	ldr	r2, [r7, #16]
 8000e00:	4313      	orrs	r3, r2
 8000e02:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	693a      	ldr	r2, [r7, #16]
 8000e08:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	685b      	ldr	r3, [r3, #4]
 8000e0e:	2203      	movs	r2, #3
 8000e10:	4013      	ands	r3, r2
 8000e12:	2b02      	cmp	r3, #2
 8000e14:	d123      	bne.n	8000e5e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000e16:	697b      	ldr	r3, [r7, #20]
 8000e18:	08da      	lsrs	r2, r3, #3
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	3208      	adds	r2, #8
 8000e1e:	0092      	lsls	r2, r2, #2
 8000e20:	58d3      	ldr	r3, [r2, r3]
 8000e22:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000e24:	697b      	ldr	r3, [r7, #20]
 8000e26:	2207      	movs	r2, #7
 8000e28:	4013      	ands	r3, r2
 8000e2a:	009b      	lsls	r3, r3, #2
 8000e2c:	220f      	movs	r2, #15
 8000e2e:	409a      	lsls	r2, r3
 8000e30:	0013      	movs	r3, r2
 8000e32:	43da      	mvns	r2, r3
 8000e34:	693b      	ldr	r3, [r7, #16]
 8000e36:	4013      	ands	r3, r2
 8000e38:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	691a      	ldr	r2, [r3, #16]
 8000e3e:	697b      	ldr	r3, [r7, #20]
 8000e40:	2107      	movs	r1, #7
 8000e42:	400b      	ands	r3, r1
 8000e44:	009b      	lsls	r3, r3, #2
 8000e46:	409a      	lsls	r2, r3
 8000e48:	0013      	movs	r3, r2
 8000e4a:	693a      	ldr	r2, [r7, #16]
 8000e4c:	4313      	orrs	r3, r2
 8000e4e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000e50:	697b      	ldr	r3, [r7, #20]
 8000e52:	08da      	lsrs	r2, r3, #3
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	3208      	adds	r2, #8
 8000e58:	0092      	lsls	r2, r2, #2
 8000e5a:	6939      	ldr	r1, [r7, #16]
 8000e5c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000e64:	697b      	ldr	r3, [r7, #20]
 8000e66:	005b      	lsls	r3, r3, #1
 8000e68:	2203      	movs	r2, #3
 8000e6a:	409a      	lsls	r2, r3
 8000e6c:	0013      	movs	r3, r2
 8000e6e:	43da      	mvns	r2, r3
 8000e70:	693b      	ldr	r3, [r7, #16]
 8000e72:	4013      	ands	r3, r2
 8000e74:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	685b      	ldr	r3, [r3, #4]
 8000e7a:	2203      	movs	r2, #3
 8000e7c:	401a      	ands	r2, r3
 8000e7e:	697b      	ldr	r3, [r7, #20]
 8000e80:	005b      	lsls	r3, r3, #1
 8000e82:	409a      	lsls	r2, r3
 8000e84:	0013      	movs	r3, r2
 8000e86:	693a      	ldr	r2, [r7, #16]
 8000e88:	4313      	orrs	r3, r2
 8000e8a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	693a      	ldr	r2, [r7, #16]
 8000e90:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	685a      	ldr	r2, [r3, #4]
 8000e96:	23c0      	movs	r3, #192	@ 0xc0
 8000e98:	029b      	lsls	r3, r3, #10
 8000e9a:	4013      	ands	r3, r2
 8000e9c:	d100      	bne.n	8000ea0 <HAL_GPIO_Init+0x174>
 8000e9e:	e094      	b.n	8000fca <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ea0:	4b51      	ldr	r3, [pc, #324]	@ (8000fe8 <HAL_GPIO_Init+0x2bc>)
 8000ea2:	699a      	ldr	r2, [r3, #24]
 8000ea4:	4b50      	ldr	r3, [pc, #320]	@ (8000fe8 <HAL_GPIO_Init+0x2bc>)
 8000ea6:	2101      	movs	r1, #1
 8000ea8:	430a      	orrs	r2, r1
 8000eaa:	619a      	str	r2, [r3, #24]
 8000eac:	4b4e      	ldr	r3, [pc, #312]	@ (8000fe8 <HAL_GPIO_Init+0x2bc>)
 8000eae:	699b      	ldr	r3, [r3, #24]
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	4013      	ands	r3, r2
 8000eb4:	60bb      	str	r3, [r7, #8]
 8000eb6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000eb8:	4a4c      	ldr	r2, [pc, #304]	@ (8000fec <HAL_GPIO_Init+0x2c0>)
 8000eba:	697b      	ldr	r3, [r7, #20]
 8000ebc:	089b      	lsrs	r3, r3, #2
 8000ebe:	3302      	adds	r3, #2
 8000ec0:	009b      	lsls	r3, r3, #2
 8000ec2:	589b      	ldr	r3, [r3, r2]
 8000ec4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000ec6:	697b      	ldr	r3, [r7, #20]
 8000ec8:	2203      	movs	r2, #3
 8000eca:	4013      	ands	r3, r2
 8000ecc:	009b      	lsls	r3, r3, #2
 8000ece:	220f      	movs	r2, #15
 8000ed0:	409a      	lsls	r2, r3
 8000ed2:	0013      	movs	r3, r2
 8000ed4:	43da      	mvns	r2, r3
 8000ed6:	693b      	ldr	r3, [r7, #16]
 8000ed8:	4013      	ands	r3, r2
 8000eda:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000edc:	687a      	ldr	r2, [r7, #4]
 8000ede:	2390      	movs	r3, #144	@ 0x90
 8000ee0:	05db      	lsls	r3, r3, #23
 8000ee2:	429a      	cmp	r2, r3
 8000ee4:	d00d      	beq.n	8000f02 <HAL_GPIO_Init+0x1d6>
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	4a41      	ldr	r2, [pc, #260]	@ (8000ff0 <HAL_GPIO_Init+0x2c4>)
 8000eea:	4293      	cmp	r3, r2
 8000eec:	d007      	beq.n	8000efe <HAL_GPIO_Init+0x1d2>
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	4a40      	ldr	r2, [pc, #256]	@ (8000ff4 <HAL_GPIO_Init+0x2c8>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d101      	bne.n	8000efa <HAL_GPIO_Init+0x1ce>
 8000ef6:	2302      	movs	r3, #2
 8000ef8:	e004      	b.n	8000f04 <HAL_GPIO_Init+0x1d8>
 8000efa:	2305      	movs	r3, #5
 8000efc:	e002      	b.n	8000f04 <HAL_GPIO_Init+0x1d8>
 8000efe:	2301      	movs	r3, #1
 8000f00:	e000      	b.n	8000f04 <HAL_GPIO_Init+0x1d8>
 8000f02:	2300      	movs	r3, #0
 8000f04:	697a      	ldr	r2, [r7, #20]
 8000f06:	2103      	movs	r1, #3
 8000f08:	400a      	ands	r2, r1
 8000f0a:	0092      	lsls	r2, r2, #2
 8000f0c:	4093      	lsls	r3, r2
 8000f0e:	693a      	ldr	r2, [r7, #16]
 8000f10:	4313      	orrs	r3, r2
 8000f12:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000f14:	4935      	ldr	r1, [pc, #212]	@ (8000fec <HAL_GPIO_Init+0x2c0>)
 8000f16:	697b      	ldr	r3, [r7, #20]
 8000f18:	089b      	lsrs	r3, r3, #2
 8000f1a:	3302      	adds	r3, #2
 8000f1c:	009b      	lsls	r3, r3, #2
 8000f1e:	693a      	ldr	r2, [r7, #16]
 8000f20:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f22:	4b35      	ldr	r3, [pc, #212]	@ (8000ff8 <HAL_GPIO_Init+0x2cc>)
 8000f24:	689b      	ldr	r3, [r3, #8]
 8000f26:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	43da      	mvns	r2, r3
 8000f2c:	693b      	ldr	r3, [r7, #16]
 8000f2e:	4013      	ands	r3, r2
 8000f30:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	685a      	ldr	r2, [r3, #4]
 8000f36:	2380      	movs	r3, #128	@ 0x80
 8000f38:	035b      	lsls	r3, r3, #13
 8000f3a:	4013      	ands	r3, r2
 8000f3c:	d003      	beq.n	8000f46 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8000f3e:	693a      	ldr	r2, [r7, #16]
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	4313      	orrs	r3, r2
 8000f44:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000f46:	4b2c      	ldr	r3, [pc, #176]	@ (8000ff8 <HAL_GPIO_Init+0x2cc>)
 8000f48:	693a      	ldr	r2, [r7, #16]
 8000f4a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000f4c:	4b2a      	ldr	r3, [pc, #168]	@ (8000ff8 <HAL_GPIO_Init+0x2cc>)
 8000f4e:	68db      	ldr	r3, [r3, #12]
 8000f50:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	43da      	mvns	r2, r3
 8000f56:	693b      	ldr	r3, [r7, #16]
 8000f58:	4013      	ands	r3, r2
 8000f5a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	685a      	ldr	r2, [r3, #4]
 8000f60:	2380      	movs	r3, #128	@ 0x80
 8000f62:	039b      	lsls	r3, r3, #14
 8000f64:	4013      	ands	r3, r2
 8000f66:	d003      	beq.n	8000f70 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8000f68:	693a      	ldr	r2, [r7, #16]
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	4313      	orrs	r3, r2
 8000f6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000f70:	4b21      	ldr	r3, [pc, #132]	@ (8000ff8 <HAL_GPIO_Init+0x2cc>)
 8000f72:	693a      	ldr	r2, [r7, #16]
 8000f74:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8000f76:	4b20      	ldr	r3, [pc, #128]	@ (8000ff8 <HAL_GPIO_Init+0x2cc>)
 8000f78:	685b      	ldr	r3, [r3, #4]
 8000f7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	43da      	mvns	r2, r3
 8000f80:	693b      	ldr	r3, [r7, #16]
 8000f82:	4013      	ands	r3, r2
 8000f84:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	685a      	ldr	r2, [r3, #4]
 8000f8a:	2380      	movs	r3, #128	@ 0x80
 8000f8c:	029b      	lsls	r3, r3, #10
 8000f8e:	4013      	ands	r3, r2
 8000f90:	d003      	beq.n	8000f9a <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8000f92:	693a      	ldr	r2, [r7, #16]
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	4313      	orrs	r3, r2
 8000f98:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000f9a:	4b17      	ldr	r3, [pc, #92]	@ (8000ff8 <HAL_GPIO_Init+0x2cc>)
 8000f9c:	693a      	ldr	r2, [r7, #16]
 8000f9e:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8000fa0:	4b15      	ldr	r3, [pc, #84]	@ (8000ff8 <HAL_GPIO_Init+0x2cc>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	43da      	mvns	r2, r3
 8000faa:	693b      	ldr	r3, [r7, #16]
 8000fac:	4013      	ands	r3, r2
 8000fae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	685a      	ldr	r2, [r3, #4]
 8000fb4:	2380      	movs	r3, #128	@ 0x80
 8000fb6:	025b      	lsls	r3, r3, #9
 8000fb8:	4013      	ands	r3, r2
 8000fba:	d003      	beq.n	8000fc4 <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 8000fbc:	693a      	ldr	r2, [r7, #16]
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	4313      	orrs	r3, r2
 8000fc2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000fc4:	4b0c      	ldr	r3, [pc, #48]	@ (8000ff8 <HAL_GPIO_Init+0x2cc>)
 8000fc6:	693a      	ldr	r2, [r7, #16]
 8000fc8:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8000fca:	697b      	ldr	r3, [r7, #20]
 8000fcc:	3301      	adds	r3, #1
 8000fce:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	681a      	ldr	r2, [r3, #0]
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	40da      	lsrs	r2, r3
 8000fd8:	1e13      	subs	r3, r2, #0
 8000fda:	d000      	beq.n	8000fde <HAL_GPIO_Init+0x2b2>
 8000fdc:	e6ae      	b.n	8000d3c <HAL_GPIO_Init+0x10>
  } 
}
 8000fde:	46c0      	nop			@ (mov r8, r8)
 8000fe0:	46c0      	nop			@ (mov r8, r8)
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	b006      	add	sp, #24
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	40021000 	.word	0x40021000
 8000fec:	40010000 	.word	0x40010000
 8000ff0:	48000400 	.word	0x48000400
 8000ff4:	48000800 	.word	0x48000800
 8000ff8:	40010400 	.word	0x40010400

08000ffc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
 8001004:	0008      	movs	r0, r1
 8001006:	0011      	movs	r1, r2
 8001008:	1cbb      	adds	r3, r7, #2
 800100a:	1c02      	adds	r2, r0, #0
 800100c:	801a      	strh	r2, [r3, #0]
 800100e:	1c7b      	adds	r3, r7, #1
 8001010:	1c0a      	adds	r2, r1, #0
 8001012:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001014:	1c7b      	adds	r3, r7, #1
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d004      	beq.n	8001026 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800101c:	1cbb      	adds	r3, r7, #2
 800101e:	881a      	ldrh	r2, [r3, #0]
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001024:	e003      	b.n	800102e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001026:	1cbb      	adds	r3, r7, #2
 8001028:	881a      	ldrh	r2, [r3, #0]
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800102e:	46c0      	nop			@ (mov r8, r8)
 8001030:	46bd      	mov	sp, r7
 8001032:	b002      	add	sp, #8
 8001034:	bd80      	pop	{r7, pc}
	...

08001038 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b088      	sub	sp, #32
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	2b00      	cmp	r3, #0
 8001044:	d102      	bne.n	800104c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001046:	2301      	movs	r3, #1
 8001048:	f000 fb76 	bl	8001738 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	2201      	movs	r2, #1
 8001052:	4013      	ands	r3, r2
 8001054:	d100      	bne.n	8001058 <HAL_RCC_OscConfig+0x20>
 8001056:	e08e      	b.n	8001176 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001058:	4bc5      	ldr	r3, [pc, #788]	@ (8001370 <HAL_RCC_OscConfig+0x338>)
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	220c      	movs	r2, #12
 800105e:	4013      	ands	r3, r2
 8001060:	2b04      	cmp	r3, #4
 8001062:	d00e      	beq.n	8001082 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001064:	4bc2      	ldr	r3, [pc, #776]	@ (8001370 <HAL_RCC_OscConfig+0x338>)
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	220c      	movs	r2, #12
 800106a:	4013      	ands	r3, r2
 800106c:	2b08      	cmp	r3, #8
 800106e:	d117      	bne.n	80010a0 <HAL_RCC_OscConfig+0x68>
 8001070:	4bbf      	ldr	r3, [pc, #764]	@ (8001370 <HAL_RCC_OscConfig+0x338>)
 8001072:	685a      	ldr	r2, [r3, #4]
 8001074:	23c0      	movs	r3, #192	@ 0xc0
 8001076:	025b      	lsls	r3, r3, #9
 8001078:	401a      	ands	r2, r3
 800107a:	2380      	movs	r3, #128	@ 0x80
 800107c:	025b      	lsls	r3, r3, #9
 800107e:	429a      	cmp	r2, r3
 8001080:	d10e      	bne.n	80010a0 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001082:	4bbb      	ldr	r3, [pc, #748]	@ (8001370 <HAL_RCC_OscConfig+0x338>)
 8001084:	681a      	ldr	r2, [r3, #0]
 8001086:	2380      	movs	r3, #128	@ 0x80
 8001088:	029b      	lsls	r3, r3, #10
 800108a:	4013      	ands	r3, r2
 800108c:	d100      	bne.n	8001090 <HAL_RCC_OscConfig+0x58>
 800108e:	e071      	b.n	8001174 <HAL_RCC_OscConfig+0x13c>
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d000      	beq.n	800109a <HAL_RCC_OscConfig+0x62>
 8001098:	e06c      	b.n	8001174 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 800109a:	2301      	movs	r3, #1
 800109c:	f000 fb4c 	bl	8001738 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	2b01      	cmp	r3, #1
 80010a6:	d107      	bne.n	80010b8 <HAL_RCC_OscConfig+0x80>
 80010a8:	4bb1      	ldr	r3, [pc, #708]	@ (8001370 <HAL_RCC_OscConfig+0x338>)
 80010aa:	681a      	ldr	r2, [r3, #0]
 80010ac:	4bb0      	ldr	r3, [pc, #704]	@ (8001370 <HAL_RCC_OscConfig+0x338>)
 80010ae:	2180      	movs	r1, #128	@ 0x80
 80010b0:	0249      	lsls	r1, r1, #9
 80010b2:	430a      	orrs	r2, r1
 80010b4:	601a      	str	r2, [r3, #0]
 80010b6:	e02f      	b.n	8001118 <HAL_RCC_OscConfig+0xe0>
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d10c      	bne.n	80010da <HAL_RCC_OscConfig+0xa2>
 80010c0:	4bab      	ldr	r3, [pc, #684]	@ (8001370 <HAL_RCC_OscConfig+0x338>)
 80010c2:	681a      	ldr	r2, [r3, #0]
 80010c4:	4baa      	ldr	r3, [pc, #680]	@ (8001370 <HAL_RCC_OscConfig+0x338>)
 80010c6:	49ab      	ldr	r1, [pc, #684]	@ (8001374 <HAL_RCC_OscConfig+0x33c>)
 80010c8:	400a      	ands	r2, r1
 80010ca:	601a      	str	r2, [r3, #0]
 80010cc:	4ba8      	ldr	r3, [pc, #672]	@ (8001370 <HAL_RCC_OscConfig+0x338>)
 80010ce:	681a      	ldr	r2, [r3, #0]
 80010d0:	4ba7      	ldr	r3, [pc, #668]	@ (8001370 <HAL_RCC_OscConfig+0x338>)
 80010d2:	49a9      	ldr	r1, [pc, #676]	@ (8001378 <HAL_RCC_OscConfig+0x340>)
 80010d4:	400a      	ands	r2, r1
 80010d6:	601a      	str	r2, [r3, #0]
 80010d8:	e01e      	b.n	8001118 <HAL_RCC_OscConfig+0xe0>
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	2b05      	cmp	r3, #5
 80010e0:	d10e      	bne.n	8001100 <HAL_RCC_OscConfig+0xc8>
 80010e2:	4ba3      	ldr	r3, [pc, #652]	@ (8001370 <HAL_RCC_OscConfig+0x338>)
 80010e4:	681a      	ldr	r2, [r3, #0]
 80010e6:	4ba2      	ldr	r3, [pc, #648]	@ (8001370 <HAL_RCC_OscConfig+0x338>)
 80010e8:	2180      	movs	r1, #128	@ 0x80
 80010ea:	02c9      	lsls	r1, r1, #11
 80010ec:	430a      	orrs	r2, r1
 80010ee:	601a      	str	r2, [r3, #0]
 80010f0:	4b9f      	ldr	r3, [pc, #636]	@ (8001370 <HAL_RCC_OscConfig+0x338>)
 80010f2:	681a      	ldr	r2, [r3, #0]
 80010f4:	4b9e      	ldr	r3, [pc, #632]	@ (8001370 <HAL_RCC_OscConfig+0x338>)
 80010f6:	2180      	movs	r1, #128	@ 0x80
 80010f8:	0249      	lsls	r1, r1, #9
 80010fa:	430a      	orrs	r2, r1
 80010fc:	601a      	str	r2, [r3, #0]
 80010fe:	e00b      	b.n	8001118 <HAL_RCC_OscConfig+0xe0>
 8001100:	4b9b      	ldr	r3, [pc, #620]	@ (8001370 <HAL_RCC_OscConfig+0x338>)
 8001102:	681a      	ldr	r2, [r3, #0]
 8001104:	4b9a      	ldr	r3, [pc, #616]	@ (8001370 <HAL_RCC_OscConfig+0x338>)
 8001106:	499b      	ldr	r1, [pc, #620]	@ (8001374 <HAL_RCC_OscConfig+0x33c>)
 8001108:	400a      	ands	r2, r1
 800110a:	601a      	str	r2, [r3, #0]
 800110c:	4b98      	ldr	r3, [pc, #608]	@ (8001370 <HAL_RCC_OscConfig+0x338>)
 800110e:	681a      	ldr	r2, [r3, #0]
 8001110:	4b97      	ldr	r3, [pc, #604]	@ (8001370 <HAL_RCC_OscConfig+0x338>)
 8001112:	4999      	ldr	r1, [pc, #612]	@ (8001378 <HAL_RCC_OscConfig+0x340>)
 8001114:	400a      	ands	r2, r1
 8001116:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	2b00      	cmp	r3, #0
 800111e:	d014      	beq.n	800114a <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001120:	f7ff fb56 	bl	80007d0 <HAL_GetTick>
 8001124:	0003      	movs	r3, r0
 8001126:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001128:	e008      	b.n	800113c <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800112a:	f7ff fb51 	bl	80007d0 <HAL_GetTick>
 800112e:	0002      	movs	r2, r0
 8001130:	69bb      	ldr	r3, [r7, #24]
 8001132:	1ad3      	subs	r3, r2, r3
 8001134:	2b64      	cmp	r3, #100	@ 0x64
 8001136:	d901      	bls.n	800113c <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8001138:	2303      	movs	r3, #3
 800113a:	e2fd      	b.n	8001738 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800113c:	4b8c      	ldr	r3, [pc, #560]	@ (8001370 <HAL_RCC_OscConfig+0x338>)
 800113e:	681a      	ldr	r2, [r3, #0]
 8001140:	2380      	movs	r3, #128	@ 0x80
 8001142:	029b      	lsls	r3, r3, #10
 8001144:	4013      	ands	r3, r2
 8001146:	d0f0      	beq.n	800112a <HAL_RCC_OscConfig+0xf2>
 8001148:	e015      	b.n	8001176 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800114a:	f7ff fb41 	bl	80007d0 <HAL_GetTick>
 800114e:	0003      	movs	r3, r0
 8001150:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001152:	e008      	b.n	8001166 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001154:	f7ff fb3c 	bl	80007d0 <HAL_GetTick>
 8001158:	0002      	movs	r2, r0
 800115a:	69bb      	ldr	r3, [r7, #24]
 800115c:	1ad3      	subs	r3, r2, r3
 800115e:	2b64      	cmp	r3, #100	@ 0x64
 8001160:	d901      	bls.n	8001166 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8001162:	2303      	movs	r3, #3
 8001164:	e2e8      	b.n	8001738 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001166:	4b82      	ldr	r3, [pc, #520]	@ (8001370 <HAL_RCC_OscConfig+0x338>)
 8001168:	681a      	ldr	r2, [r3, #0]
 800116a:	2380      	movs	r3, #128	@ 0x80
 800116c:	029b      	lsls	r3, r3, #10
 800116e:	4013      	ands	r3, r2
 8001170:	d1f0      	bne.n	8001154 <HAL_RCC_OscConfig+0x11c>
 8001172:	e000      	b.n	8001176 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001174:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	2202      	movs	r2, #2
 800117c:	4013      	ands	r3, r2
 800117e:	d100      	bne.n	8001182 <HAL_RCC_OscConfig+0x14a>
 8001180:	e06c      	b.n	800125c <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001182:	4b7b      	ldr	r3, [pc, #492]	@ (8001370 <HAL_RCC_OscConfig+0x338>)
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	220c      	movs	r2, #12
 8001188:	4013      	ands	r3, r2
 800118a:	d00e      	beq.n	80011aa <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800118c:	4b78      	ldr	r3, [pc, #480]	@ (8001370 <HAL_RCC_OscConfig+0x338>)
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	220c      	movs	r2, #12
 8001192:	4013      	ands	r3, r2
 8001194:	2b08      	cmp	r3, #8
 8001196:	d11f      	bne.n	80011d8 <HAL_RCC_OscConfig+0x1a0>
 8001198:	4b75      	ldr	r3, [pc, #468]	@ (8001370 <HAL_RCC_OscConfig+0x338>)
 800119a:	685a      	ldr	r2, [r3, #4]
 800119c:	23c0      	movs	r3, #192	@ 0xc0
 800119e:	025b      	lsls	r3, r3, #9
 80011a0:	401a      	ands	r2, r3
 80011a2:	2380      	movs	r3, #128	@ 0x80
 80011a4:	021b      	lsls	r3, r3, #8
 80011a6:	429a      	cmp	r2, r3
 80011a8:	d116      	bne.n	80011d8 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011aa:	4b71      	ldr	r3, [pc, #452]	@ (8001370 <HAL_RCC_OscConfig+0x338>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	2202      	movs	r2, #2
 80011b0:	4013      	ands	r3, r2
 80011b2:	d005      	beq.n	80011c0 <HAL_RCC_OscConfig+0x188>
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	68db      	ldr	r3, [r3, #12]
 80011b8:	2b01      	cmp	r3, #1
 80011ba:	d001      	beq.n	80011c0 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80011bc:	2301      	movs	r3, #1
 80011be:	e2bb      	b.n	8001738 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011c0:	4b6b      	ldr	r3, [pc, #428]	@ (8001370 <HAL_RCC_OscConfig+0x338>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	22f8      	movs	r2, #248	@ 0xf8
 80011c6:	4393      	bics	r3, r2
 80011c8:	0019      	movs	r1, r3
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	691b      	ldr	r3, [r3, #16]
 80011ce:	00da      	lsls	r2, r3, #3
 80011d0:	4b67      	ldr	r3, [pc, #412]	@ (8001370 <HAL_RCC_OscConfig+0x338>)
 80011d2:	430a      	orrs	r2, r1
 80011d4:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011d6:	e041      	b.n	800125c <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	68db      	ldr	r3, [r3, #12]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d024      	beq.n	800122a <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011e0:	4b63      	ldr	r3, [pc, #396]	@ (8001370 <HAL_RCC_OscConfig+0x338>)
 80011e2:	681a      	ldr	r2, [r3, #0]
 80011e4:	4b62      	ldr	r3, [pc, #392]	@ (8001370 <HAL_RCC_OscConfig+0x338>)
 80011e6:	2101      	movs	r1, #1
 80011e8:	430a      	orrs	r2, r1
 80011ea:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011ec:	f7ff faf0 	bl	80007d0 <HAL_GetTick>
 80011f0:	0003      	movs	r3, r0
 80011f2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011f4:	e008      	b.n	8001208 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011f6:	f7ff faeb 	bl	80007d0 <HAL_GetTick>
 80011fa:	0002      	movs	r2, r0
 80011fc:	69bb      	ldr	r3, [r7, #24]
 80011fe:	1ad3      	subs	r3, r2, r3
 8001200:	2b02      	cmp	r3, #2
 8001202:	d901      	bls.n	8001208 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001204:	2303      	movs	r3, #3
 8001206:	e297      	b.n	8001738 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001208:	4b59      	ldr	r3, [pc, #356]	@ (8001370 <HAL_RCC_OscConfig+0x338>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	2202      	movs	r2, #2
 800120e:	4013      	ands	r3, r2
 8001210:	d0f1      	beq.n	80011f6 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001212:	4b57      	ldr	r3, [pc, #348]	@ (8001370 <HAL_RCC_OscConfig+0x338>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	22f8      	movs	r2, #248	@ 0xf8
 8001218:	4393      	bics	r3, r2
 800121a:	0019      	movs	r1, r3
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	691b      	ldr	r3, [r3, #16]
 8001220:	00da      	lsls	r2, r3, #3
 8001222:	4b53      	ldr	r3, [pc, #332]	@ (8001370 <HAL_RCC_OscConfig+0x338>)
 8001224:	430a      	orrs	r2, r1
 8001226:	601a      	str	r2, [r3, #0]
 8001228:	e018      	b.n	800125c <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800122a:	4b51      	ldr	r3, [pc, #324]	@ (8001370 <HAL_RCC_OscConfig+0x338>)
 800122c:	681a      	ldr	r2, [r3, #0]
 800122e:	4b50      	ldr	r3, [pc, #320]	@ (8001370 <HAL_RCC_OscConfig+0x338>)
 8001230:	2101      	movs	r1, #1
 8001232:	438a      	bics	r2, r1
 8001234:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001236:	f7ff facb 	bl	80007d0 <HAL_GetTick>
 800123a:	0003      	movs	r3, r0
 800123c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800123e:	e008      	b.n	8001252 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001240:	f7ff fac6 	bl	80007d0 <HAL_GetTick>
 8001244:	0002      	movs	r2, r0
 8001246:	69bb      	ldr	r3, [r7, #24]
 8001248:	1ad3      	subs	r3, r2, r3
 800124a:	2b02      	cmp	r3, #2
 800124c:	d901      	bls.n	8001252 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 800124e:	2303      	movs	r3, #3
 8001250:	e272      	b.n	8001738 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001252:	4b47      	ldr	r3, [pc, #284]	@ (8001370 <HAL_RCC_OscConfig+0x338>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	2202      	movs	r2, #2
 8001258:	4013      	ands	r3, r2
 800125a:	d1f1      	bne.n	8001240 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	2208      	movs	r2, #8
 8001262:	4013      	ands	r3, r2
 8001264:	d036      	beq.n	80012d4 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	69db      	ldr	r3, [r3, #28]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d019      	beq.n	80012a2 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800126e:	4b40      	ldr	r3, [pc, #256]	@ (8001370 <HAL_RCC_OscConfig+0x338>)
 8001270:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001272:	4b3f      	ldr	r3, [pc, #252]	@ (8001370 <HAL_RCC_OscConfig+0x338>)
 8001274:	2101      	movs	r1, #1
 8001276:	430a      	orrs	r2, r1
 8001278:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800127a:	f7ff faa9 	bl	80007d0 <HAL_GetTick>
 800127e:	0003      	movs	r3, r0
 8001280:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001282:	e008      	b.n	8001296 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001284:	f7ff faa4 	bl	80007d0 <HAL_GetTick>
 8001288:	0002      	movs	r2, r0
 800128a:	69bb      	ldr	r3, [r7, #24]
 800128c:	1ad3      	subs	r3, r2, r3
 800128e:	2b02      	cmp	r3, #2
 8001290:	d901      	bls.n	8001296 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8001292:	2303      	movs	r3, #3
 8001294:	e250      	b.n	8001738 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001296:	4b36      	ldr	r3, [pc, #216]	@ (8001370 <HAL_RCC_OscConfig+0x338>)
 8001298:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800129a:	2202      	movs	r2, #2
 800129c:	4013      	ands	r3, r2
 800129e:	d0f1      	beq.n	8001284 <HAL_RCC_OscConfig+0x24c>
 80012a0:	e018      	b.n	80012d4 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012a2:	4b33      	ldr	r3, [pc, #204]	@ (8001370 <HAL_RCC_OscConfig+0x338>)
 80012a4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80012a6:	4b32      	ldr	r3, [pc, #200]	@ (8001370 <HAL_RCC_OscConfig+0x338>)
 80012a8:	2101      	movs	r1, #1
 80012aa:	438a      	bics	r2, r1
 80012ac:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012ae:	f7ff fa8f 	bl	80007d0 <HAL_GetTick>
 80012b2:	0003      	movs	r3, r0
 80012b4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012b6:	e008      	b.n	80012ca <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012b8:	f7ff fa8a 	bl	80007d0 <HAL_GetTick>
 80012bc:	0002      	movs	r2, r0
 80012be:	69bb      	ldr	r3, [r7, #24]
 80012c0:	1ad3      	subs	r3, r2, r3
 80012c2:	2b02      	cmp	r3, #2
 80012c4:	d901      	bls.n	80012ca <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 80012c6:	2303      	movs	r3, #3
 80012c8:	e236      	b.n	8001738 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012ca:	4b29      	ldr	r3, [pc, #164]	@ (8001370 <HAL_RCC_OscConfig+0x338>)
 80012cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012ce:	2202      	movs	r2, #2
 80012d0:	4013      	ands	r3, r2
 80012d2:	d1f1      	bne.n	80012b8 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	2204      	movs	r2, #4
 80012da:	4013      	ands	r3, r2
 80012dc:	d100      	bne.n	80012e0 <HAL_RCC_OscConfig+0x2a8>
 80012de:	e0b5      	b.n	800144c <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012e0:	201f      	movs	r0, #31
 80012e2:	183b      	adds	r3, r7, r0
 80012e4:	2200      	movs	r2, #0
 80012e6:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012e8:	4b21      	ldr	r3, [pc, #132]	@ (8001370 <HAL_RCC_OscConfig+0x338>)
 80012ea:	69da      	ldr	r2, [r3, #28]
 80012ec:	2380      	movs	r3, #128	@ 0x80
 80012ee:	055b      	lsls	r3, r3, #21
 80012f0:	4013      	ands	r3, r2
 80012f2:	d110      	bne.n	8001316 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012f4:	4b1e      	ldr	r3, [pc, #120]	@ (8001370 <HAL_RCC_OscConfig+0x338>)
 80012f6:	69da      	ldr	r2, [r3, #28]
 80012f8:	4b1d      	ldr	r3, [pc, #116]	@ (8001370 <HAL_RCC_OscConfig+0x338>)
 80012fa:	2180      	movs	r1, #128	@ 0x80
 80012fc:	0549      	lsls	r1, r1, #21
 80012fe:	430a      	orrs	r2, r1
 8001300:	61da      	str	r2, [r3, #28]
 8001302:	4b1b      	ldr	r3, [pc, #108]	@ (8001370 <HAL_RCC_OscConfig+0x338>)
 8001304:	69da      	ldr	r2, [r3, #28]
 8001306:	2380      	movs	r3, #128	@ 0x80
 8001308:	055b      	lsls	r3, r3, #21
 800130a:	4013      	ands	r3, r2
 800130c:	60fb      	str	r3, [r7, #12]
 800130e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001310:	183b      	adds	r3, r7, r0
 8001312:	2201      	movs	r2, #1
 8001314:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001316:	4b19      	ldr	r3, [pc, #100]	@ (800137c <HAL_RCC_OscConfig+0x344>)
 8001318:	681a      	ldr	r2, [r3, #0]
 800131a:	2380      	movs	r3, #128	@ 0x80
 800131c:	005b      	lsls	r3, r3, #1
 800131e:	4013      	ands	r3, r2
 8001320:	d11a      	bne.n	8001358 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001322:	4b16      	ldr	r3, [pc, #88]	@ (800137c <HAL_RCC_OscConfig+0x344>)
 8001324:	681a      	ldr	r2, [r3, #0]
 8001326:	4b15      	ldr	r3, [pc, #84]	@ (800137c <HAL_RCC_OscConfig+0x344>)
 8001328:	2180      	movs	r1, #128	@ 0x80
 800132a:	0049      	lsls	r1, r1, #1
 800132c:	430a      	orrs	r2, r1
 800132e:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001330:	f7ff fa4e 	bl	80007d0 <HAL_GetTick>
 8001334:	0003      	movs	r3, r0
 8001336:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001338:	e008      	b.n	800134c <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800133a:	f7ff fa49 	bl	80007d0 <HAL_GetTick>
 800133e:	0002      	movs	r2, r0
 8001340:	69bb      	ldr	r3, [r7, #24]
 8001342:	1ad3      	subs	r3, r2, r3
 8001344:	2b64      	cmp	r3, #100	@ 0x64
 8001346:	d901      	bls.n	800134c <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8001348:	2303      	movs	r3, #3
 800134a:	e1f5      	b.n	8001738 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800134c:	4b0b      	ldr	r3, [pc, #44]	@ (800137c <HAL_RCC_OscConfig+0x344>)
 800134e:	681a      	ldr	r2, [r3, #0]
 8001350:	2380      	movs	r3, #128	@ 0x80
 8001352:	005b      	lsls	r3, r3, #1
 8001354:	4013      	ands	r3, r2
 8001356:	d0f0      	beq.n	800133a <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	689b      	ldr	r3, [r3, #8]
 800135c:	2b01      	cmp	r3, #1
 800135e:	d10f      	bne.n	8001380 <HAL_RCC_OscConfig+0x348>
 8001360:	4b03      	ldr	r3, [pc, #12]	@ (8001370 <HAL_RCC_OscConfig+0x338>)
 8001362:	6a1a      	ldr	r2, [r3, #32]
 8001364:	4b02      	ldr	r3, [pc, #8]	@ (8001370 <HAL_RCC_OscConfig+0x338>)
 8001366:	2101      	movs	r1, #1
 8001368:	430a      	orrs	r2, r1
 800136a:	621a      	str	r2, [r3, #32]
 800136c:	e036      	b.n	80013dc <HAL_RCC_OscConfig+0x3a4>
 800136e:	46c0      	nop			@ (mov r8, r8)
 8001370:	40021000 	.word	0x40021000
 8001374:	fffeffff 	.word	0xfffeffff
 8001378:	fffbffff 	.word	0xfffbffff
 800137c:	40007000 	.word	0x40007000
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	689b      	ldr	r3, [r3, #8]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d10c      	bne.n	80013a2 <HAL_RCC_OscConfig+0x36a>
 8001388:	4bca      	ldr	r3, [pc, #808]	@ (80016b4 <HAL_RCC_OscConfig+0x67c>)
 800138a:	6a1a      	ldr	r2, [r3, #32]
 800138c:	4bc9      	ldr	r3, [pc, #804]	@ (80016b4 <HAL_RCC_OscConfig+0x67c>)
 800138e:	2101      	movs	r1, #1
 8001390:	438a      	bics	r2, r1
 8001392:	621a      	str	r2, [r3, #32]
 8001394:	4bc7      	ldr	r3, [pc, #796]	@ (80016b4 <HAL_RCC_OscConfig+0x67c>)
 8001396:	6a1a      	ldr	r2, [r3, #32]
 8001398:	4bc6      	ldr	r3, [pc, #792]	@ (80016b4 <HAL_RCC_OscConfig+0x67c>)
 800139a:	2104      	movs	r1, #4
 800139c:	438a      	bics	r2, r1
 800139e:	621a      	str	r2, [r3, #32]
 80013a0:	e01c      	b.n	80013dc <HAL_RCC_OscConfig+0x3a4>
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	689b      	ldr	r3, [r3, #8]
 80013a6:	2b05      	cmp	r3, #5
 80013a8:	d10c      	bne.n	80013c4 <HAL_RCC_OscConfig+0x38c>
 80013aa:	4bc2      	ldr	r3, [pc, #776]	@ (80016b4 <HAL_RCC_OscConfig+0x67c>)
 80013ac:	6a1a      	ldr	r2, [r3, #32]
 80013ae:	4bc1      	ldr	r3, [pc, #772]	@ (80016b4 <HAL_RCC_OscConfig+0x67c>)
 80013b0:	2104      	movs	r1, #4
 80013b2:	430a      	orrs	r2, r1
 80013b4:	621a      	str	r2, [r3, #32]
 80013b6:	4bbf      	ldr	r3, [pc, #764]	@ (80016b4 <HAL_RCC_OscConfig+0x67c>)
 80013b8:	6a1a      	ldr	r2, [r3, #32]
 80013ba:	4bbe      	ldr	r3, [pc, #760]	@ (80016b4 <HAL_RCC_OscConfig+0x67c>)
 80013bc:	2101      	movs	r1, #1
 80013be:	430a      	orrs	r2, r1
 80013c0:	621a      	str	r2, [r3, #32]
 80013c2:	e00b      	b.n	80013dc <HAL_RCC_OscConfig+0x3a4>
 80013c4:	4bbb      	ldr	r3, [pc, #748]	@ (80016b4 <HAL_RCC_OscConfig+0x67c>)
 80013c6:	6a1a      	ldr	r2, [r3, #32]
 80013c8:	4bba      	ldr	r3, [pc, #744]	@ (80016b4 <HAL_RCC_OscConfig+0x67c>)
 80013ca:	2101      	movs	r1, #1
 80013cc:	438a      	bics	r2, r1
 80013ce:	621a      	str	r2, [r3, #32]
 80013d0:	4bb8      	ldr	r3, [pc, #736]	@ (80016b4 <HAL_RCC_OscConfig+0x67c>)
 80013d2:	6a1a      	ldr	r2, [r3, #32]
 80013d4:	4bb7      	ldr	r3, [pc, #732]	@ (80016b4 <HAL_RCC_OscConfig+0x67c>)
 80013d6:	2104      	movs	r1, #4
 80013d8:	438a      	bics	r2, r1
 80013da:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	689b      	ldr	r3, [r3, #8]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d014      	beq.n	800140e <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013e4:	f7ff f9f4 	bl	80007d0 <HAL_GetTick>
 80013e8:	0003      	movs	r3, r0
 80013ea:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013ec:	e009      	b.n	8001402 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013ee:	f7ff f9ef 	bl	80007d0 <HAL_GetTick>
 80013f2:	0002      	movs	r2, r0
 80013f4:	69bb      	ldr	r3, [r7, #24]
 80013f6:	1ad3      	subs	r3, r2, r3
 80013f8:	4aaf      	ldr	r2, [pc, #700]	@ (80016b8 <HAL_RCC_OscConfig+0x680>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d901      	bls.n	8001402 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80013fe:	2303      	movs	r3, #3
 8001400:	e19a      	b.n	8001738 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001402:	4bac      	ldr	r3, [pc, #688]	@ (80016b4 <HAL_RCC_OscConfig+0x67c>)
 8001404:	6a1b      	ldr	r3, [r3, #32]
 8001406:	2202      	movs	r2, #2
 8001408:	4013      	ands	r3, r2
 800140a:	d0f0      	beq.n	80013ee <HAL_RCC_OscConfig+0x3b6>
 800140c:	e013      	b.n	8001436 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800140e:	f7ff f9df 	bl	80007d0 <HAL_GetTick>
 8001412:	0003      	movs	r3, r0
 8001414:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001416:	e009      	b.n	800142c <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001418:	f7ff f9da 	bl	80007d0 <HAL_GetTick>
 800141c:	0002      	movs	r2, r0
 800141e:	69bb      	ldr	r3, [r7, #24]
 8001420:	1ad3      	subs	r3, r2, r3
 8001422:	4aa5      	ldr	r2, [pc, #660]	@ (80016b8 <HAL_RCC_OscConfig+0x680>)
 8001424:	4293      	cmp	r3, r2
 8001426:	d901      	bls.n	800142c <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8001428:	2303      	movs	r3, #3
 800142a:	e185      	b.n	8001738 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800142c:	4ba1      	ldr	r3, [pc, #644]	@ (80016b4 <HAL_RCC_OscConfig+0x67c>)
 800142e:	6a1b      	ldr	r3, [r3, #32]
 8001430:	2202      	movs	r2, #2
 8001432:	4013      	ands	r3, r2
 8001434:	d1f0      	bne.n	8001418 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001436:	231f      	movs	r3, #31
 8001438:	18fb      	adds	r3, r7, r3
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	2b01      	cmp	r3, #1
 800143e:	d105      	bne.n	800144c <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001440:	4b9c      	ldr	r3, [pc, #624]	@ (80016b4 <HAL_RCC_OscConfig+0x67c>)
 8001442:	69da      	ldr	r2, [r3, #28]
 8001444:	4b9b      	ldr	r3, [pc, #620]	@ (80016b4 <HAL_RCC_OscConfig+0x67c>)
 8001446:	499d      	ldr	r1, [pc, #628]	@ (80016bc <HAL_RCC_OscConfig+0x684>)
 8001448:	400a      	ands	r2, r1
 800144a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	2210      	movs	r2, #16
 8001452:	4013      	ands	r3, r2
 8001454:	d063      	beq.n	800151e <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	695b      	ldr	r3, [r3, #20]
 800145a:	2b01      	cmp	r3, #1
 800145c:	d12a      	bne.n	80014b4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800145e:	4b95      	ldr	r3, [pc, #596]	@ (80016b4 <HAL_RCC_OscConfig+0x67c>)
 8001460:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001462:	4b94      	ldr	r3, [pc, #592]	@ (80016b4 <HAL_RCC_OscConfig+0x67c>)
 8001464:	2104      	movs	r1, #4
 8001466:	430a      	orrs	r2, r1
 8001468:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800146a:	4b92      	ldr	r3, [pc, #584]	@ (80016b4 <HAL_RCC_OscConfig+0x67c>)
 800146c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800146e:	4b91      	ldr	r3, [pc, #580]	@ (80016b4 <HAL_RCC_OscConfig+0x67c>)
 8001470:	2101      	movs	r1, #1
 8001472:	430a      	orrs	r2, r1
 8001474:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001476:	f7ff f9ab 	bl	80007d0 <HAL_GetTick>
 800147a:	0003      	movs	r3, r0
 800147c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800147e:	e008      	b.n	8001492 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001480:	f7ff f9a6 	bl	80007d0 <HAL_GetTick>
 8001484:	0002      	movs	r2, r0
 8001486:	69bb      	ldr	r3, [r7, #24]
 8001488:	1ad3      	subs	r3, r2, r3
 800148a:	2b02      	cmp	r3, #2
 800148c:	d901      	bls.n	8001492 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 800148e:	2303      	movs	r3, #3
 8001490:	e152      	b.n	8001738 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001492:	4b88      	ldr	r3, [pc, #544]	@ (80016b4 <HAL_RCC_OscConfig+0x67c>)
 8001494:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001496:	2202      	movs	r2, #2
 8001498:	4013      	ands	r3, r2
 800149a:	d0f1      	beq.n	8001480 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800149c:	4b85      	ldr	r3, [pc, #532]	@ (80016b4 <HAL_RCC_OscConfig+0x67c>)
 800149e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80014a0:	22f8      	movs	r2, #248	@ 0xf8
 80014a2:	4393      	bics	r3, r2
 80014a4:	0019      	movs	r1, r3
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	699b      	ldr	r3, [r3, #24]
 80014aa:	00da      	lsls	r2, r3, #3
 80014ac:	4b81      	ldr	r3, [pc, #516]	@ (80016b4 <HAL_RCC_OscConfig+0x67c>)
 80014ae:	430a      	orrs	r2, r1
 80014b0:	635a      	str	r2, [r3, #52]	@ 0x34
 80014b2:	e034      	b.n	800151e <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	695b      	ldr	r3, [r3, #20]
 80014b8:	3305      	adds	r3, #5
 80014ba:	d111      	bne.n	80014e0 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80014bc:	4b7d      	ldr	r3, [pc, #500]	@ (80016b4 <HAL_RCC_OscConfig+0x67c>)
 80014be:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80014c0:	4b7c      	ldr	r3, [pc, #496]	@ (80016b4 <HAL_RCC_OscConfig+0x67c>)
 80014c2:	2104      	movs	r1, #4
 80014c4:	438a      	bics	r2, r1
 80014c6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80014c8:	4b7a      	ldr	r3, [pc, #488]	@ (80016b4 <HAL_RCC_OscConfig+0x67c>)
 80014ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80014cc:	22f8      	movs	r2, #248	@ 0xf8
 80014ce:	4393      	bics	r3, r2
 80014d0:	0019      	movs	r1, r3
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	699b      	ldr	r3, [r3, #24]
 80014d6:	00da      	lsls	r2, r3, #3
 80014d8:	4b76      	ldr	r3, [pc, #472]	@ (80016b4 <HAL_RCC_OscConfig+0x67c>)
 80014da:	430a      	orrs	r2, r1
 80014dc:	635a      	str	r2, [r3, #52]	@ 0x34
 80014de:	e01e      	b.n	800151e <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80014e0:	4b74      	ldr	r3, [pc, #464]	@ (80016b4 <HAL_RCC_OscConfig+0x67c>)
 80014e2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80014e4:	4b73      	ldr	r3, [pc, #460]	@ (80016b4 <HAL_RCC_OscConfig+0x67c>)
 80014e6:	2104      	movs	r1, #4
 80014e8:	430a      	orrs	r2, r1
 80014ea:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80014ec:	4b71      	ldr	r3, [pc, #452]	@ (80016b4 <HAL_RCC_OscConfig+0x67c>)
 80014ee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80014f0:	4b70      	ldr	r3, [pc, #448]	@ (80016b4 <HAL_RCC_OscConfig+0x67c>)
 80014f2:	2101      	movs	r1, #1
 80014f4:	438a      	bics	r2, r1
 80014f6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014f8:	f7ff f96a 	bl	80007d0 <HAL_GetTick>
 80014fc:	0003      	movs	r3, r0
 80014fe:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001500:	e008      	b.n	8001514 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001502:	f7ff f965 	bl	80007d0 <HAL_GetTick>
 8001506:	0002      	movs	r2, r0
 8001508:	69bb      	ldr	r3, [r7, #24]
 800150a:	1ad3      	subs	r3, r2, r3
 800150c:	2b02      	cmp	r3, #2
 800150e:	d901      	bls.n	8001514 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8001510:	2303      	movs	r3, #3
 8001512:	e111      	b.n	8001738 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001514:	4b67      	ldr	r3, [pc, #412]	@ (80016b4 <HAL_RCC_OscConfig+0x67c>)
 8001516:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001518:	2202      	movs	r2, #2
 800151a:	4013      	ands	r3, r2
 800151c:	d1f1      	bne.n	8001502 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	2220      	movs	r2, #32
 8001524:	4013      	ands	r3, r2
 8001526:	d05c      	beq.n	80015e2 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001528:	4b62      	ldr	r3, [pc, #392]	@ (80016b4 <HAL_RCC_OscConfig+0x67c>)
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	220c      	movs	r2, #12
 800152e:	4013      	ands	r3, r2
 8001530:	2b0c      	cmp	r3, #12
 8001532:	d00e      	beq.n	8001552 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001534:	4b5f      	ldr	r3, [pc, #380]	@ (80016b4 <HAL_RCC_OscConfig+0x67c>)
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	220c      	movs	r2, #12
 800153a:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 800153c:	2b08      	cmp	r3, #8
 800153e:	d114      	bne.n	800156a <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001540:	4b5c      	ldr	r3, [pc, #368]	@ (80016b4 <HAL_RCC_OscConfig+0x67c>)
 8001542:	685a      	ldr	r2, [r3, #4]
 8001544:	23c0      	movs	r3, #192	@ 0xc0
 8001546:	025b      	lsls	r3, r3, #9
 8001548:	401a      	ands	r2, r3
 800154a:	23c0      	movs	r3, #192	@ 0xc0
 800154c:	025b      	lsls	r3, r3, #9
 800154e:	429a      	cmp	r2, r3
 8001550:	d10b      	bne.n	800156a <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001552:	4b58      	ldr	r3, [pc, #352]	@ (80016b4 <HAL_RCC_OscConfig+0x67c>)
 8001554:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001556:	2380      	movs	r3, #128	@ 0x80
 8001558:	029b      	lsls	r3, r3, #10
 800155a:	4013      	ands	r3, r2
 800155c:	d040      	beq.n	80015e0 <HAL_RCC_OscConfig+0x5a8>
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6a1b      	ldr	r3, [r3, #32]
 8001562:	2b01      	cmp	r3, #1
 8001564:	d03c      	beq.n	80015e0 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001566:	2301      	movs	r3, #1
 8001568:	e0e6      	b.n	8001738 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6a1b      	ldr	r3, [r3, #32]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d01b      	beq.n	80015aa <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001572:	4b50      	ldr	r3, [pc, #320]	@ (80016b4 <HAL_RCC_OscConfig+0x67c>)
 8001574:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001576:	4b4f      	ldr	r3, [pc, #316]	@ (80016b4 <HAL_RCC_OscConfig+0x67c>)
 8001578:	2180      	movs	r1, #128	@ 0x80
 800157a:	0249      	lsls	r1, r1, #9
 800157c:	430a      	orrs	r2, r1
 800157e:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001580:	f7ff f926 	bl	80007d0 <HAL_GetTick>
 8001584:	0003      	movs	r3, r0
 8001586:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001588:	e008      	b.n	800159c <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800158a:	f7ff f921 	bl	80007d0 <HAL_GetTick>
 800158e:	0002      	movs	r2, r0
 8001590:	69bb      	ldr	r3, [r7, #24]
 8001592:	1ad3      	subs	r3, r2, r3
 8001594:	2b02      	cmp	r3, #2
 8001596:	d901      	bls.n	800159c <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8001598:	2303      	movs	r3, #3
 800159a:	e0cd      	b.n	8001738 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800159c:	4b45      	ldr	r3, [pc, #276]	@ (80016b4 <HAL_RCC_OscConfig+0x67c>)
 800159e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80015a0:	2380      	movs	r3, #128	@ 0x80
 80015a2:	029b      	lsls	r3, r3, #10
 80015a4:	4013      	ands	r3, r2
 80015a6:	d0f0      	beq.n	800158a <HAL_RCC_OscConfig+0x552>
 80015a8:	e01b      	b.n	80015e2 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80015aa:	4b42      	ldr	r3, [pc, #264]	@ (80016b4 <HAL_RCC_OscConfig+0x67c>)
 80015ac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80015ae:	4b41      	ldr	r3, [pc, #260]	@ (80016b4 <HAL_RCC_OscConfig+0x67c>)
 80015b0:	4943      	ldr	r1, [pc, #268]	@ (80016c0 <HAL_RCC_OscConfig+0x688>)
 80015b2:	400a      	ands	r2, r1
 80015b4:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015b6:	f7ff f90b 	bl	80007d0 <HAL_GetTick>
 80015ba:	0003      	movs	r3, r0
 80015bc:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80015be:	e008      	b.n	80015d2 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80015c0:	f7ff f906 	bl	80007d0 <HAL_GetTick>
 80015c4:	0002      	movs	r2, r0
 80015c6:	69bb      	ldr	r3, [r7, #24]
 80015c8:	1ad3      	subs	r3, r2, r3
 80015ca:	2b02      	cmp	r3, #2
 80015cc:	d901      	bls.n	80015d2 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 80015ce:	2303      	movs	r3, #3
 80015d0:	e0b2      	b.n	8001738 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80015d2:	4b38      	ldr	r3, [pc, #224]	@ (80016b4 <HAL_RCC_OscConfig+0x67c>)
 80015d4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80015d6:	2380      	movs	r3, #128	@ 0x80
 80015d8:	029b      	lsls	r3, r3, #10
 80015da:	4013      	ands	r3, r2
 80015dc:	d1f0      	bne.n	80015c0 <HAL_RCC_OscConfig+0x588>
 80015de:	e000      	b.n	80015e2 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80015e0:	46c0      	nop			@ (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d100      	bne.n	80015ec <HAL_RCC_OscConfig+0x5b4>
 80015ea:	e0a4      	b.n	8001736 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80015ec:	4b31      	ldr	r3, [pc, #196]	@ (80016b4 <HAL_RCC_OscConfig+0x67c>)
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	220c      	movs	r2, #12
 80015f2:	4013      	ands	r3, r2
 80015f4:	2b08      	cmp	r3, #8
 80015f6:	d100      	bne.n	80015fa <HAL_RCC_OscConfig+0x5c2>
 80015f8:	e078      	b.n	80016ec <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015fe:	2b02      	cmp	r3, #2
 8001600:	d14c      	bne.n	800169c <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001602:	4b2c      	ldr	r3, [pc, #176]	@ (80016b4 <HAL_RCC_OscConfig+0x67c>)
 8001604:	681a      	ldr	r2, [r3, #0]
 8001606:	4b2b      	ldr	r3, [pc, #172]	@ (80016b4 <HAL_RCC_OscConfig+0x67c>)
 8001608:	492e      	ldr	r1, [pc, #184]	@ (80016c4 <HAL_RCC_OscConfig+0x68c>)
 800160a:	400a      	ands	r2, r1
 800160c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800160e:	f7ff f8df 	bl	80007d0 <HAL_GetTick>
 8001612:	0003      	movs	r3, r0
 8001614:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001616:	e008      	b.n	800162a <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001618:	f7ff f8da 	bl	80007d0 <HAL_GetTick>
 800161c:	0002      	movs	r2, r0
 800161e:	69bb      	ldr	r3, [r7, #24]
 8001620:	1ad3      	subs	r3, r2, r3
 8001622:	2b02      	cmp	r3, #2
 8001624:	d901      	bls.n	800162a <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8001626:	2303      	movs	r3, #3
 8001628:	e086      	b.n	8001738 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800162a:	4b22      	ldr	r3, [pc, #136]	@ (80016b4 <HAL_RCC_OscConfig+0x67c>)
 800162c:	681a      	ldr	r2, [r3, #0]
 800162e:	2380      	movs	r3, #128	@ 0x80
 8001630:	049b      	lsls	r3, r3, #18
 8001632:	4013      	ands	r3, r2
 8001634:	d1f0      	bne.n	8001618 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001636:	4b1f      	ldr	r3, [pc, #124]	@ (80016b4 <HAL_RCC_OscConfig+0x67c>)
 8001638:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800163a:	220f      	movs	r2, #15
 800163c:	4393      	bics	r3, r2
 800163e:	0019      	movs	r1, r3
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001644:	4b1b      	ldr	r3, [pc, #108]	@ (80016b4 <HAL_RCC_OscConfig+0x67c>)
 8001646:	430a      	orrs	r2, r1
 8001648:	62da      	str	r2, [r3, #44]	@ 0x2c
 800164a:	4b1a      	ldr	r3, [pc, #104]	@ (80016b4 <HAL_RCC_OscConfig+0x67c>)
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	4a1e      	ldr	r2, [pc, #120]	@ (80016c8 <HAL_RCC_OscConfig+0x690>)
 8001650:	4013      	ands	r3, r2
 8001652:	0019      	movs	r1, r3
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800165c:	431a      	orrs	r2, r3
 800165e:	4b15      	ldr	r3, [pc, #84]	@ (80016b4 <HAL_RCC_OscConfig+0x67c>)
 8001660:	430a      	orrs	r2, r1
 8001662:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001664:	4b13      	ldr	r3, [pc, #76]	@ (80016b4 <HAL_RCC_OscConfig+0x67c>)
 8001666:	681a      	ldr	r2, [r3, #0]
 8001668:	4b12      	ldr	r3, [pc, #72]	@ (80016b4 <HAL_RCC_OscConfig+0x67c>)
 800166a:	2180      	movs	r1, #128	@ 0x80
 800166c:	0449      	lsls	r1, r1, #17
 800166e:	430a      	orrs	r2, r1
 8001670:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001672:	f7ff f8ad 	bl	80007d0 <HAL_GetTick>
 8001676:	0003      	movs	r3, r0
 8001678:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800167a:	e008      	b.n	800168e <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800167c:	f7ff f8a8 	bl	80007d0 <HAL_GetTick>
 8001680:	0002      	movs	r2, r0
 8001682:	69bb      	ldr	r3, [r7, #24]
 8001684:	1ad3      	subs	r3, r2, r3
 8001686:	2b02      	cmp	r3, #2
 8001688:	d901      	bls.n	800168e <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 800168a:	2303      	movs	r3, #3
 800168c:	e054      	b.n	8001738 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800168e:	4b09      	ldr	r3, [pc, #36]	@ (80016b4 <HAL_RCC_OscConfig+0x67c>)
 8001690:	681a      	ldr	r2, [r3, #0]
 8001692:	2380      	movs	r3, #128	@ 0x80
 8001694:	049b      	lsls	r3, r3, #18
 8001696:	4013      	ands	r3, r2
 8001698:	d0f0      	beq.n	800167c <HAL_RCC_OscConfig+0x644>
 800169a:	e04c      	b.n	8001736 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800169c:	4b05      	ldr	r3, [pc, #20]	@ (80016b4 <HAL_RCC_OscConfig+0x67c>)
 800169e:	681a      	ldr	r2, [r3, #0]
 80016a0:	4b04      	ldr	r3, [pc, #16]	@ (80016b4 <HAL_RCC_OscConfig+0x67c>)
 80016a2:	4908      	ldr	r1, [pc, #32]	@ (80016c4 <HAL_RCC_OscConfig+0x68c>)
 80016a4:	400a      	ands	r2, r1
 80016a6:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016a8:	f7ff f892 	bl	80007d0 <HAL_GetTick>
 80016ac:	0003      	movs	r3, r0
 80016ae:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016b0:	e015      	b.n	80016de <HAL_RCC_OscConfig+0x6a6>
 80016b2:	46c0      	nop			@ (mov r8, r8)
 80016b4:	40021000 	.word	0x40021000
 80016b8:	00001388 	.word	0x00001388
 80016bc:	efffffff 	.word	0xefffffff
 80016c0:	fffeffff 	.word	0xfffeffff
 80016c4:	feffffff 	.word	0xfeffffff
 80016c8:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016cc:	f7ff f880 	bl	80007d0 <HAL_GetTick>
 80016d0:	0002      	movs	r2, r0
 80016d2:	69bb      	ldr	r3, [r7, #24]
 80016d4:	1ad3      	subs	r3, r2, r3
 80016d6:	2b02      	cmp	r3, #2
 80016d8:	d901      	bls.n	80016de <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 80016da:	2303      	movs	r3, #3
 80016dc:	e02c      	b.n	8001738 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016de:	4b18      	ldr	r3, [pc, #96]	@ (8001740 <HAL_RCC_OscConfig+0x708>)
 80016e0:	681a      	ldr	r2, [r3, #0]
 80016e2:	2380      	movs	r3, #128	@ 0x80
 80016e4:	049b      	lsls	r3, r3, #18
 80016e6:	4013      	ands	r3, r2
 80016e8:	d1f0      	bne.n	80016cc <HAL_RCC_OscConfig+0x694>
 80016ea:	e024      	b.n	8001736 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016f0:	2b01      	cmp	r3, #1
 80016f2:	d101      	bne.n	80016f8 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 80016f4:	2301      	movs	r3, #1
 80016f6:	e01f      	b.n	8001738 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80016f8:	4b11      	ldr	r3, [pc, #68]	@ (8001740 <HAL_RCC_OscConfig+0x708>)
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80016fe:	4b10      	ldr	r3, [pc, #64]	@ (8001740 <HAL_RCC_OscConfig+0x708>)
 8001700:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001702:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001704:	697a      	ldr	r2, [r7, #20]
 8001706:	23c0      	movs	r3, #192	@ 0xc0
 8001708:	025b      	lsls	r3, r3, #9
 800170a:	401a      	ands	r2, r3
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001710:	429a      	cmp	r2, r3
 8001712:	d10e      	bne.n	8001732 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001714:	693b      	ldr	r3, [r7, #16]
 8001716:	220f      	movs	r2, #15
 8001718:	401a      	ands	r2, r3
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800171e:	429a      	cmp	r2, r3
 8001720:	d107      	bne.n	8001732 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001722:	697a      	ldr	r2, [r7, #20]
 8001724:	23f0      	movs	r3, #240	@ 0xf0
 8001726:	039b      	lsls	r3, r3, #14
 8001728:	401a      	ands	r2, r3
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800172e:	429a      	cmp	r2, r3
 8001730:	d001      	beq.n	8001736 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8001732:	2301      	movs	r3, #1
 8001734:	e000      	b.n	8001738 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8001736:	2300      	movs	r3, #0
}
 8001738:	0018      	movs	r0, r3
 800173a:	46bd      	mov	sp, r7
 800173c:	b008      	add	sp, #32
 800173e:	bd80      	pop	{r7, pc}
 8001740:	40021000 	.word	0x40021000

08001744 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b084      	sub	sp, #16
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
 800174c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d101      	bne.n	8001758 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001754:	2301      	movs	r3, #1
 8001756:	e0bf      	b.n	80018d8 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001758:	4b61      	ldr	r3, [pc, #388]	@ (80018e0 <HAL_RCC_ClockConfig+0x19c>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	2201      	movs	r2, #1
 800175e:	4013      	ands	r3, r2
 8001760:	683a      	ldr	r2, [r7, #0]
 8001762:	429a      	cmp	r2, r3
 8001764:	d911      	bls.n	800178a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001766:	4b5e      	ldr	r3, [pc, #376]	@ (80018e0 <HAL_RCC_ClockConfig+0x19c>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	2201      	movs	r2, #1
 800176c:	4393      	bics	r3, r2
 800176e:	0019      	movs	r1, r3
 8001770:	4b5b      	ldr	r3, [pc, #364]	@ (80018e0 <HAL_RCC_ClockConfig+0x19c>)
 8001772:	683a      	ldr	r2, [r7, #0]
 8001774:	430a      	orrs	r2, r1
 8001776:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001778:	4b59      	ldr	r3, [pc, #356]	@ (80018e0 <HAL_RCC_ClockConfig+0x19c>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	2201      	movs	r2, #1
 800177e:	4013      	ands	r3, r2
 8001780:	683a      	ldr	r2, [r7, #0]
 8001782:	429a      	cmp	r2, r3
 8001784:	d001      	beq.n	800178a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001786:	2301      	movs	r3, #1
 8001788:	e0a6      	b.n	80018d8 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	2202      	movs	r2, #2
 8001790:	4013      	ands	r3, r2
 8001792:	d015      	beq.n	80017c0 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	2204      	movs	r2, #4
 800179a:	4013      	ands	r3, r2
 800179c:	d006      	beq.n	80017ac <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800179e:	4b51      	ldr	r3, [pc, #324]	@ (80018e4 <HAL_RCC_ClockConfig+0x1a0>)
 80017a0:	685a      	ldr	r2, [r3, #4]
 80017a2:	4b50      	ldr	r3, [pc, #320]	@ (80018e4 <HAL_RCC_ClockConfig+0x1a0>)
 80017a4:	21e0      	movs	r1, #224	@ 0xe0
 80017a6:	00c9      	lsls	r1, r1, #3
 80017a8:	430a      	orrs	r2, r1
 80017aa:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017ac:	4b4d      	ldr	r3, [pc, #308]	@ (80018e4 <HAL_RCC_ClockConfig+0x1a0>)
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	22f0      	movs	r2, #240	@ 0xf0
 80017b2:	4393      	bics	r3, r2
 80017b4:	0019      	movs	r1, r3
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	689a      	ldr	r2, [r3, #8]
 80017ba:	4b4a      	ldr	r3, [pc, #296]	@ (80018e4 <HAL_RCC_ClockConfig+0x1a0>)
 80017bc:	430a      	orrs	r2, r1
 80017be:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	2201      	movs	r2, #1
 80017c6:	4013      	ands	r3, r2
 80017c8:	d04c      	beq.n	8001864 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	2b01      	cmp	r3, #1
 80017d0:	d107      	bne.n	80017e2 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017d2:	4b44      	ldr	r3, [pc, #272]	@ (80018e4 <HAL_RCC_ClockConfig+0x1a0>)
 80017d4:	681a      	ldr	r2, [r3, #0]
 80017d6:	2380      	movs	r3, #128	@ 0x80
 80017d8:	029b      	lsls	r3, r3, #10
 80017da:	4013      	ands	r3, r2
 80017dc:	d120      	bne.n	8001820 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80017de:	2301      	movs	r3, #1
 80017e0:	e07a      	b.n	80018d8 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	2b02      	cmp	r3, #2
 80017e8:	d107      	bne.n	80017fa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017ea:	4b3e      	ldr	r3, [pc, #248]	@ (80018e4 <HAL_RCC_ClockConfig+0x1a0>)
 80017ec:	681a      	ldr	r2, [r3, #0]
 80017ee:	2380      	movs	r3, #128	@ 0x80
 80017f0:	049b      	lsls	r3, r3, #18
 80017f2:	4013      	ands	r3, r2
 80017f4:	d114      	bne.n	8001820 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80017f6:	2301      	movs	r3, #1
 80017f8:	e06e      	b.n	80018d8 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	2b03      	cmp	r3, #3
 8001800:	d107      	bne.n	8001812 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001802:	4b38      	ldr	r3, [pc, #224]	@ (80018e4 <HAL_RCC_ClockConfig+0x1a0>)
 8001804:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001806:	2380      	movs	r3, #128	@ 0x80
 8001808:	029b      	lsls	r3, r3, #10
 800180a:	4013      	ands	r3, r2
 800180c:	d108      	bne.n	8001820 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800180e:	2301      	movs	r3, #1
 8001810:	e062      	b.n	80018d8 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001812:	4b34      	ldr	r3, [pc, #208]	@ (80018e4 <HAL_RCC_ClockConfig+0x1a0>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	2202      	movs	r2, #2
 8001818:	4013      	ands	r3, r2
 800181a:	d101      	bne.n	8001820 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800181c:	2301      	movs	r3, #1
 800181e:	e05b      	b.n	80018d8 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001820:	4b30      	ldr	r3, [pc, #192]	@ (80018e4 <HAL_RCC_ClockConfig+0x1a0>)
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	2203      	movs	r2, #3
 8001826:	4393      	bics	r3, r2
 8001828:	0019      	movs	r1, r3
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	685a      	ldr	r2, [r3, #4]
 800182e:	4b2d      	ldr	r3, [pc, #180]	@ (80018e4 <HAL_RCC_ClockConfig+0x1a0>)
 8001830:	430a      	orrs	r2, r1
 8001832:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001834:	f7fe ffcc 	bl	80007d0 <HAL_GetTick>
 8001838:	0003      	movs	r3, r0
 800183a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800183c:	e009      	b.n	8001852 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800183e:	f7fe ffc7 	bl	80007d0 <HAL_GetTick>
 8001842:	0002      	movs	r2, r0
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	1ad3      	subs	r3, r2, r3
 8001848:	4a27      	ldr	r2, [pc, #156]	@ (80018e8 <HAL_RCC_ClockConfig+0x1a4>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d901      	bls.n	8001852 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800184e:	2303      	movs	r3, #3
 8001850:	e042      	b.n	80018d8 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001852:	4b24      	ldr	r3, [pc, #144]	@ (80018e4 <HAL_RCC_ClockConfig+0x1a0>)
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	220c      	movs	r2, #12
 8001858:	401a      	ands	r2, r3
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	009b      	lsls	r3, r3, #2
 8001860:	429a      	cmp	r2, r3
 8001862:	d1ec      	bne.n	800183e <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001864:	4b1e      	ldr	r3, [pc, #120]	@ (80018e0 <HAL_RCC_ClockConfig+0x19c>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	2201      	movs	r2, #1
 800186a:	4013      	ands	r3, r2
 800186c:	683a      	ldr	r2, [r7, #0]
 800186e:	429a      	cmp	r2, r3
 8001870:	d211      	bcs.n	8001896 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001872:	4b1b      	ldr	r3, [pc, #108]	@ (80018e0 <HAL_RCC_ClockConfig+0x19c>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	2201      	movs	r2, #1
 8001878:	4393      	bics	r3, r2
 800187a:	0019      	movs	r1, r3
 800187c:	4b18      	ldr	r3, [pc, #96]	@ (80018e0 <HAL_RCC_ClockConfig+0x19c>)
 800187e:	683a      	ldr	r2, [r7, #0]
 8001880:	430a      	orrs	r2, r1
 8001882:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001884:	4b16      	ldr	r3, [pc, #88]	@ (80018e0 <HAL_RCC_ClockConfig+0x19c>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	2201      	movs	r2, #1
 800188a:	4013      	ands	r3, r2
 800188c:	683a      	ldr	r2, [r7, #0]
 800188e:	429a      	cmp	r2, r3
 8001890:	d001      	beq.n	8001896 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8001892:	2301      	movs	r3, #1
 8001894:	e020      	b.n	80018d8 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	2204      	movs	r2, #4
 800189c:	4013      	ands	r3, r2
 800189e:	d009      	beq.n	80018b4 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80018a0:	4b10      	ldr	r3, [pc, #64]	@ (80018e4 <HAL_RCC_ClockConfig+0x1a0>)
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	4a11      	ldr	r2, [pc, #68]	@ (80018ec <HAL_RCC_ClockConfig+0x1a8>)
 80018a6:	4013      	ands	r3, r2
 80018a8:	0019      	movs	r1, r3
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	68da      	ldr	r2, [r3, #12]
 80018ae:	4b0d      	ldr	r3, [pc, #52]	@ (80018e4 <HAL_RCC_ClockConfig+0x1a0>)
 80018b0:	430a      	orrs	r2, r1
 80018b2:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80018b4:	f000 f820 	bl	80018f8 <HAL_RCC_GetSysClockFreq>
 80018b8:	0001      	movs	r1, r0
 80018ba:	4b0a      	ldr	r3, [pc, #40]	@ (80018e4 <HAL_RCC_ClockConfig+0x1a0>)
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	091b      	lsrs	r3, r3, #4
 80018c0:	220f      	movs	r2, #15
 80018c2:	4013      	ands	r3, r2
 80018c4:	4a0a      	ldr	r2, [pc, #40]	@ (80018f0 <HAL_RCC_ClockConfig+0x1ac>)
 80018c6:	5cd3      	ldrb	r3, [r2, r3]
 80018c8:	000a      	movs	r2, r1
 80018ca:	40da      	lsrs	r2, r3
 80018cc:	4b09      	ldr	r3, [pc, #36]	@ (80018f4 <HAL_RCC_ClockConfig+0x1b0>)
 80018ce:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80018d0:	2003      	movs	r0, #3
 80018d2:	f7fe ff37 	bl	8000744 <HAL_InitTick>
  
  return HAL_OK;
 80018d6:	2300      	movs	r3, #0
}
 80018d8:	0018      	movs	r0, r3
 80018da:	46bd      	mov	sp, r7
 80018dc:	b004      	add	sp, #16
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	40022000 	.word	0x40022000
 80018e4:	40021000 	.word	0x40021000
 80018e8:	00001388 	.word	0x00001388
 80018ec:	fffff8ff 	.word	0xfffff8ff
 80018f0:	08001bbc 	.word	0x08001bbc
 80018f4:	20000000 	.word	0x20000000

080018f8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b086      	sub	sp, #24
 80018fc:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80018fe:	2300      	movs	r3, #0
 8001900:	60fb      	str	r3, [r7, #12]
 8001902:	2300      	movs	r3, #0
 8001904:	60bb      	str	r3, [r7, #8]
 8001906:	2300      	movs	r3, #0
 8001908:	617b      	str	r3, [r7, #20]
 800190a:	2300      	movs	r3, #0
 800190c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800190e:	2300      	movs	r3, #0
 8001910:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8001912:	4b2d      	ldr	r3, [pc, #180]	@ (80019c8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	220c      	movs	r2, #12
 800191c:	4013      	ands	r3, r2
 800191e:	2b0c      	cmp	r3, #12
 8001920:	d046      	beq.n	80019b0 <HAL_RCC_GetSysClockFreq+0xb8>
 8001922:	d848      	bhi.n	80019b6 <HAL_RCC_GetSysClockFreq+0xbe>
 8001924:	2b04      	cmp	r3, #4
 8001926:	d002      	beq.n	800192e <HAL_RCC_GetSysClockFreq+0x36>
 8001928:	2b08      	cmp	r3, #8
 800192a:	d003      	beq.n	8001934 <HAL_RCC_GetSysClockFreq+0x3c>
 800192c:	e043      	b.n	80019b6 <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800192e:	4b27      	ldr	r3, [pc, #156]	@ (80019cc <HAL_RCC_GetSysClockFreq+0xd4>)
 8001930:	613b      	str	r3, [r7, #16]
      break;
 8001932:	e043      	b.n	80019bc <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	0c9b      	lsrs	r3, r3, #18
 8001938:	220f      	movs	r2, #15
 800193a:	4013      	ands	r3, r2
 800193c:	4a24      	ldr	r2, [pc, #144]	@ (80019d0 <HAL_RCC_GetSysClockFreq+0xd8>)
 800193e:	5cd3      	ldrb	r3, [r2, r3]
 8001940:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001942:	4b21      	ldr	r3, [pc, #132]	@ (80019c8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001944:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001946:	220f      	movs	r2, #15
 8001948:	4013      	ands	r3, r2
 800194a:	4a22      	ldr	r2, [pc, #136]	@ (80019d4 <HAL_RCC_GetSysClockFreq+0xdc>)
 800194c:	5cd3      	ldrb	r3, [r2, r3]
 800194e:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001950:	68fa      	ldr	r2, [r7, #12]
 8001952:	23c0      	movs	r3, #192	@ 0xc0
 8001954:	025b      	lsls	r3, r3, #9
 8001956:	401a      	ands	r2, r3
 8001958:	2380      	movs	r3, #128	@ 0x80
 800195a:	025b      	lsls	r3, r3, #9
 800195c:	429a      	cmp	r2, r3
 800195e:	d109      	bne.n	8001974 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001960:	68b9      	ldr	r1, [r7, #8]
 8001962:	481a      	ldr	r0, [pc, #104]	@ (80019cc <HAL_RCC_GetSysClockFreq+0xd4>)
 8001964:	f7fe fbd0 	bl	8000108 <__udivsi3>
 8001968:	0003      	movs	r3, r0
 800196a:	001a      	movs	r2, r3
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	4353      	muls	r3, r2
 8001970:	617b      	str	r3, [r7, #20]
 8001972:	e01a      	b.n	80019aa <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8001974:	68fa      	ldr	r2, [r7, #12]
 8001976:	23c0      	movs	r3, #192	@ 0xc0
 8001978:	025b      	lsls	r3, r3, #9
 800197a:	401a      	ands	r2, r3
 800197c:	23c0      	movs	r3, #192	@ 0xc0
 800197e:	025b      	lsls	r3, r3, #9
 8001980:	429a      	cmp	r2, r3
 8001982:	d109      	bne.n	8001998 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001984:	68b9      	ldr	r1, [r7, #8]
 8001986:	4814      	ldr	r0, [pc, #80]	@ (80019d8 <HAL_RCC_GetSysClockFreq+0xe0>)
 8001988:	f7fe fbbe 	bl	8000108 <__udivsi3>
 800198c:	0003      	movs	r3, r0
 800198e:	001a      	movs	r2, r3
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	4353      	muls	r3, r2
 8001994:	617b      	str	r3, [r7, #20]
 8001996:	e008      	b.n	80019aa <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001998:	68b9      	ldr	r1, [r7, #8]
 800199a:	480c      	ldr	r0, [pc, #48]	@ (80019cc <HAL_RCC_GetSysClockFreq+0xd4>)
 800199c:	f7fe fbb4 	bl	8000108 <__udivsi3>
 80019a0:	0003      	movs	r3, r0
 80019a2:	001a      	movs	r2, r3
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	4353      	muls	r3, r2
 80019a8:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 80019aa:	697b      	ldr	r3, [r7, #20]
 80019ac:	613b      	str	r3, [r7, #16]
      break;
 80019ae:	e005      	b.n	80019bc <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 80019b0:	4b09      	ldr	r3, [pc, #36]	@ (80019d8 <HAL_RCC_GetSysClockFreq+0xe0>)
 80019b2:	613b      	str	r3, [r7, #16]
      break;
 80019b4:	e002      	b.n	80019bc <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80019b6:	4b05      	ldr	r3, [pc, #20]	@ (80019cc <HAL_RCC_GetSysClockFreq+0xd4>)
 80019b8:	613b      	str	r3, [r7, #16]
      break;
 80019ba:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 80019bc:	693b      	ldr	r3, [r7, #16]
}
 80019be:	0018      	movs	r0, r3
 80019c0:	46bd      	mov	sp, r7
 80019c2:	b006      	add	sp, #24
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	46c0      	nop			@ (mov r8, r8)
 80019c8:	40021000 	.word	0x40021000
 80019cc:	007a1200 	.word	0x007a1200
 80019d0:	08001bcc 	.word	0x08001bcc
 80019d4:	08001bdc 	.word	0x08001bdc
 80019d8:	02dc6c00 	.word	0x02dc6c00

080019dc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b084      	sub	sp, #16
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d101      	bne.n	80019ee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80019ea:	2301      	movs	r3, #1
 80019ec:	e0a8      	b.n	8001b40 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d109      	bne.n	8001a0a <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	685a      	ldr	r2, [r3, #4]
 80019fa:	2382      	movs	r3, #130	@ 0x82
 80019fc:	005b      	lsls	r3, r3, #1
 80019fe:	429a      	cmp	r2, r3
 8001a00:	d009      	beq.n	8001a16 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2200      	movs	r2, #0
 8001a06:	61da      	str	r2, [r3, #28]
 8001a08:	e005      	b.n	8001a16 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2200      	movs	r2, #0
 8001a14:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2200      	movs	r2, #0
 8001a1a:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	225d      	movs	r2, #93	@ 0x5d
 8001a20:	5c9b      	ldrb	r3, [r3, r2]
 8001a22:	b2db      	uxtb	r3, r3
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d107      	bne.n	8001a38 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	225c      	movs	r2, #92	@ 0x5c
 8001a2c:	2100      	movs	r1, #0
 8001a2e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	0018      	movs	r0, r3
 8001a34:	f7fe fdc6 	bl	80005c4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	225d      	movs	r2, #93	@ 0x5d
 8001a3c:	2102      	movs	r1, #2
 8001a3e:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	681a      	ldr	r2, [r3, #0]
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	2140      	movs	r1, #64	@ 0x40
 8001a4c:	438a      	bics	r2, r1
 8001a4e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	68da      	ldr	r2, [r3, #12]
 8001a54:	23e0      	movs	r3, #224	@ 0xe0
 8001a56:	00db      	lsls	r3, r3, #3
 8001a58:	429a      	cmp	r2, r3
 8001a5a:	d902      	bls.n	8001a62 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	60fb      	str	r3, [r7, #12]
 8001a60:	e002      	b.n	8001a68 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001a62:	2380      	movs	r3, #128	@ 0x80
 8001a64:	015b      	lsls	r3, r3, #5
 8001a66:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	68da      	ldr	r2, [r3, #12]
 8001a6c:	23f0      	movs	r3, #240	@ 0xf0
 8001a6e:	011b      	lsls	r3, r3, #4
 8001a70:	429a      	cmp	r2, r3
 8001a72:	d008      	beq.n	8001a86 <HAL_SPI_Init+0xaa>
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	68da      	ldr	r2, [r3, #12]
 8001a78:	23e0      	movs	r3, #224	@ 0xe0
 8001a7a:	00db      	lsls	r3, r3, #3
 8001a7c:	429a      	cmp	r2, r3
 8001a7e:	d002      	beq.n	8001a86 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2200      	movs	r2, #0
 8001a84:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	685a      	ldr	r2, [r3, #4]
 8001a8a:	2382      	movs	r3, #130	@ 0x82
 8001a8c:	005b      	lsls	r3, r3, #1
 8001a8e:	401a      	ands	r2, r3
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6899      	ldr	r1, [r3, #8]
 8001a94:	2384      	movs	r3, #132	@ 0x84
 8001a96:	021b      	lsls	r3, r3, #8
 8001a98:	400b      	ands	r3, r1
 8001a9a:	431a      	orrs	r2, r3
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	691b      	ldr	r3, [r3, #16]
 8001aa0:	2102      	movs	r1, #2
 8001aa2:	400b      	ands	r3, r1
 8001aa4:	431a      	orrs	r2, r3
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	695b      	ldr	r3, [r3, #20]
 8001aaa:	2101      	movs	r1, #1
 8001aac:	400b      	ands	r3, r1
 8001aae:	431a      	orrs	r2, r3
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6999      	ldr	r1, [r3, #24]
 8001ab4:	2380      	movs	r3, #128	@ 0x80
 8001ab6:	009b      	lsls	r3, r3, #2
 8001ab8:	400b      	ands	r3, r1
 8001aba:	431a      	orrs	r2, r3
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	69db      	ldr	r3, [r3, #28]
 8001ac0:	2138      	movs	r1, #56	@ 0x38
 8001ac2:	400b      	ands	r3, r1
 8001ac4:	431a      	orrs	r2, r3
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6a1b      	ldr	r3, [r3, #32]
 8001aca:	2180      	movs	r1, #128	@ 0x80
 8001acc:	400b      	ands	r3, r1
 8001ace:	431a      	orrs	r2, r3
 8001ad0:	0011      	movs	r1, r2
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001ad6:	2380      	movs	r3, #128	@ 0x80
 8001ad8:	019b      	lsls	r3, r3, #6
 8001ada:	401a      	ands	r2, r3
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	430a      	orrs	r2, r1
 8001ae2:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	699b      	ldr	r3, [r3, #24]
 8001ae8:	0c1b      	lsrs	r3, r3, #16
 8001aea:	2204      	movs	r2, #4
 8001aec:	401a      	ands	r2, r3
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001af2:	2110      	movs	r1, #16
 8001af4:	400b      	ands	r3, r1
 8001af6:	431a      	orrs	r2, r3
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001afc:	2108      	movs	r1, #8
 8001afe:	400b      	ands	r3, r1
 8001b00:	431a      	orrs	r2, r3
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	68d9      	ldr	r1, [r3, #12]
 8001b06:	23f0      	movs	r3, #240	@ 0xf0
 8001b08:	011b      	lsls	r3, r3, #4
 8001b0a:	400b      	ands	r3, r1
 8001b0c:	431a      	orrs	r2, r3
 8001b0e:	0011      	movs	r1, r2
 8001b10:	68fa      	ldr	r2, [r7, #12]
 8001b12:	2380      	movs	r3, #128	@ 0x80
 8001b14:	015b      	lsls	r3, r3, #5
 8001b16:	401a      	ands	r2, r3
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	430a      	orrs	r2, r1
 8001b1e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	69da      	ldr	r2, [r3, #28]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4907      	ldr	r1, [pc, #28]	@ (8001b48 <HAL_SPI_Init+0x16c>)
 8001b2c:	400a      	ands	r2, r1
 8001b2e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2200      	movs	r2, #0
 8001b34:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	225d      	movs	r2, #93	@ 0x5d
 8001b3a:	2101      	movs	r1, #1
 8001b3c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001b3e:	2300      	movs	r3, #0
}
 8001b40:	0018      	movs	r0, r3
 8001b42:	46bd      	mov	sp, r7
 8001b44:	b004      	add	sp, #16
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	fffff7ff 	.word	0xfffff7ff

08001b4c <memset>:
 8001b4c:	0003      	movs	r3, r0
 8001b4e:	1882      	adds	r2, r0, r2
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d100      	bne.n	8001b56 <memset+0xa>
 8001b54:	4770      	bx	lr
 8001b56:	7019      	strb	r1, [r3, #0]
 8001b58:	3301      	adds	r3, #1
 8001b5a:	e7f9      	b.n	8001b50 <memset+0x4>

08001b5c <__libc_init_array>:
 8001b5c:	b570      	push	{r4, r5, r6, lr}
 8001b5e:	2600      	movs	r6, #0
 8001b60:	4c0c      	ldr	r4, [pc, #48]	@ (8001b94 <__libc_init_array+0x38>)
 8001b62:	4d0d      	ldr	r5, [pc, #52]	@ (8001b98 <__libc_init_array+0x3c>)
 8001b64:	1b64      	subs	r4, r4, r5
 8001b66:	10a4      	asrs	r4, r4, #2
 8001b68:	42a6      	cmp	r6, r4
 8001b6a:	d109      	bne.n	8001b80 <__libc_init_array+0x24>
 8001b6c:	2600      	movs	r6, #0
 8001b6e:	f000 f819 	bl	8001ba4 <_init>
 8001b72:	4c0a      	ldr	r4, [pc, #40]	@ (8001b9c <__libc_init_array+0x40>)
 8001b74:	4d0a      	ldr	r5, [pc, #40]	@ (8001ba0 <__libc_init_array+0x44>)
 8001b76:	1b64      	subs	r4, r4, r5
 8001b78:	10a4      	asrs	r4, r4, #2
 8001b7a:	42a6      	cmp	r6, r4
 8001b7c:	d105      	bne.n	8001b8a <__libc_init_array+0x2e>
 8001b7e:	bd70      	pop	{r4, r5, r6, pc}
 8001b80:	00b3      	lsls	r3, r6, #2
 8001b82:	58eb      	ldr	r3, [r5, r3]
 8001b84:	4798      	blx	r3
 8001b86:	3601      	adds	r6, #1
 8001b88:	e7ee      	b.n	8001b68 <__libc_init_array+0xc>
 8001b8a:	00b3      	lsls	r3, r6, #2
 8001b8c:	58eb      	ldr	r3, [r5, r3]
 8001b8e:	4798      	blx	r3
 8001b90:	3601      	adds	r6, #1
 8001b92:	e7f2      	b.n	8001b7a <__libc_init_array+0x1e>
 8001b94:	08001bec 	.word	0x08001bec
 8001b98:	08001bec 	.word	0x08001bec
 8001b9c:	08001bf0 	.word	0x08001bf0
 8001ba0:	08001bec 	.word	0x08001bec

08001ba4 <_init>:
 8001ba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ba6:	46c0      	nop			@ (mov r8, r8)
 8001ba8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001baa:	bc08      	pop	{r3}
 8001bac:	469e      	mov	lr, r3
 8001bae:	4770      	bx	lr

08001bb0 <_fini>:
 8001bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001bb2:	46c0      	nop			@ (mov r8, r8)
 8001bb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001bb6:	bc08      	pop	{r3}
 8001bb8:	469e      	mov	lr, r3
 8001bba:	4770      	bx	lr
